[
    {
        "id": "2eab96853f83d487",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2d2723d863d43125",
        "type": "tab",
        "label": "tests",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ac3e1af7236de124",
        "type": "tab",
        "label": "Example_ui_table",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "b068bca0a71c83ad",
        "type": "subflow",
        "name": "ParseSpreadsheet",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "c7310d59d70bdc60"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1260,
                "y": 240,
                "wires": [
                    {
                        "id": "20c5410fafc60d1b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "List_GUI"
        ]
    },
    {
        "id": "dcbfaf3f8ee1d934",
        "type": "subflow",
        "name": "HandleRegisterPollChange",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 380,
                "wires": [
                    {
                        "id": "3c690955ed69bea2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 160,
                "wires": [
                    {
                        "id": "3c690955ed69bea2",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1550,
                "y": 420,
                "wires": [
                    {
                        "id": "8e1d69d361a439f6",
                        "port": 0
                    },
                    {
                        "id": "c9cb2ca0ed43dcb4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "Added Modbus",
            "MQTT_out"
        ]
    },
    {
        "id": "c0f18c4adc5a6baf",
        "type": "subflow",
        "name": "GetInfoForExtAddress",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 80,
                "wires": [
                    {
                        "id": "a845d460e3659c45"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 80,
                "wires": [
                    {
                        "id": "7bdc7439ba84ef72",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8a3abaeed43492c7",
        "type": "subflow",
        "name": "ModbusRegister2MQTT",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 140,
                "wires": [
                    {
                        "id": "05dcf3d1a5d91138"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1740,
                "y": 140,
                "wires": [
                    {
                        "id": "c5945bd2ba2f633d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "45fbecf1fa8ca370",
        "type": "subflow",
        "name": "ModbusRegister2MQTTremove",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "88c8bac36917df6a"
                    },
                    {
                        "id": "ebc1de458dcaaec0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 120,
                "wires": [
                    {
                        "id": "be4bf82fd1047c10",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a3b444cd358a83f8",
        "type": "group",
        "z": "2eab96853f83d487",
        "style": {
            "stroke": "#2b2b2b",
            "stroke-opacity": "1",
            "fill": "#2b2b2b",
            "fill-opacity": "0.75",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3e2544089ee8aac1",
            "fc2dc13c67f7296f",
            "f8aec22624b60cae",
            "c1a5de6f7889d202"
        ],
        "x": 934,
        "y": 1019
    },
    {
        "id": "004befd4e4171dac",
        "type": "group",
        "z": "2eab96853f83d487",
        "style": {
            "stroke": "#2b2b2b",
            "stroke-opacity": "1",
            "fill": "#2b2b2b",
            "fill-opacity": "0.75",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d6250a4a83b1ce15",
            "47c8c9b113c8f54f",
            "8189851345054053",
            "99c0b21b1f3971b0"
        ],
        "x": 1034,
        "y": 1419
    },
    {
        "id": "26ecd9622bd134d0",
        "type": "ui_tab",
        "name": "Admin",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e265d4c8a1b92b55",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "YYYY/MM/DD",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "bce0984ac2260b3e",
        "type": "ui_group",
        "name": "Coils",
        "tab": "26ecd9622bd134d0",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "379a501f.53b59",
        "type": "ui_tab",
        "name": "ui-table command",
        "icon": "fa-table",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d9c8fbc7fe792503",
        "type": "modbus-client",
        "name": "LKICS2_RTU_client",
        "clienttype": "simpleser",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": false,
        "tcpHost": "0.0.0.0",
        "tcpPort": "60502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "38400",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "5000",
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "fdb468a313bc97f7",
        "type": "ui_group",
        "name": "Hardware device",
        "tab": "26ecd9622bd134d0",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "971c8909bf86ae6e",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "76a1a38f75f938d6",
        "type": "ui_group",
        "name": "Read register values",
        "tab": "971c8909bf86ae6e",
        "order": 1,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4f3fcc9c4da4f393",
        "type": "ui_group",
        "name": "Save configuration to disk",
        "tab": "26ecd9622bd134d0",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "708d28b7894d44a4",
        "type": "ui_group",
        "name": "Inputs",
        "tab": "26ecd9622bd134d0",
        "order": 6,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c38ca1e60640f844",
        "type": "ui_group",
        "name": "Input Registers",
        "tab": "26ecd9622bd134d0",
        "order": 7,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "66546b0ac0ae1558",
        "type": "ui_group",
        "name": "Holding Registers",
        "tab": "26ecd9622bd134d0",
        "order": 8,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a9ef42c8c3d06309",
        "type": "ui_group",
        "name": "Errors",
        "tab": "971c8909bf86ae6e",
        "order": 2,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "89f1348330b22bdb",
        "type": "mqtt-broker",
        "name": "template_broker",
        "broker": "localhost",
        "port": "",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "LKICS2/connected",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "true",
        "birthMsg": {},
        "closeTopic": "LKICS2/connected",
        "closeQos": "0",
        "closeRetain": "true",
        "closePayload": "false",
        "closeMsg": {},
        "willTopic": "LKICS2/connected",
        "willQos": "0",
        "willRetain": "true",
        "willPayload": "false",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "69774bfce923ece5",
        "type": "ui_group",
        "name": "ui-table with commands",
        "tab": "379a501f.53b59",
        "order": 1,
        "disp": true,
        "width": "17",
        "collapse": false
    },
    {
        "id": "989c07ccaee4eebf",
        "type": "ui_group",
        "name": "commands",
        "tab": "379a501f.53b59",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9345a4c286b1ebb3",
        "type": "ui_group",
        "name": "MQTT settings",
        "tab": "26ecd9622bd134d0",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3f6e44aaf89f3be4",
        "type": "ui_spacer",
        "z": "2eab96853f83d487",
        "name": "spacer",
        "group": "fdb468a313bc97f7",
        "order": 2,
        "width": "6",
        "height": "3"
    },
    {
        "id": "ed2e32f4aa56fa2b",
        "type": "ui_spacer",
        "z": "2eab96853f83d487",
        "name": "spacer",
        "group": "4f3fcc9c4da4f393",
        "order": 2,
        "width": "6",
        "height": "3"
    },
    {
        "id": "f211501605bcc8f3",
        "type": "ui_group",
        "name": "Write register",
        "tab": "26ecd9622bd134d0",
        "order": 3,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "20c5410fafc60d1b",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "remove first row",
        "rules": [
            {
                "t": "delete",
                "p": "payload[0]",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3d2c47c1f54d627e",
        "type": "switch",
        "z": "b068bca0a71c83ad",
        "name": "switch - has key 'Notes'",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Notes",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 240,
        "wires": [
            [
                "a427f32e1f4fe70f",
                "d67f2fed99d81c62"
            ],
            [
                "599ea7985e7d0141"
            ]
        ]
    },
    {
        "id": "c7310d59d70bdc60",
        "type": "split",
        "z": "b068bca0a71c83ad",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "4183a63b8d3d8e4e"
            ]
        ]
    },
    {
        "id": "a677efb333ab532d",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "createEmptyUnit",
        "rules": [
            {
                "t": "set",
                "p": "payload.Unit",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 160,
        "wires": [
            [
                "eaa193ec5f7b54b6"
            ]
        ]
    },
    {
        "id": "88518574a3ff97db",
        "type": "switch",
        "z": "b068bca0a71c83ad",
        "name": "switch - has key 'Unit'",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Unit",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 100,
        "wires": [
            [
                "b71aac05593c0684"
            ],
            [
                "a677efb333ab532d"
            ]
        ]
    },
    {
        "id": "599ea7985e7d0141",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.Notes",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 300,
        "wires": [
            [
                "a427f32e1f4fe70f",
                "d67f2fed99d81c62"
            ]
        ]
    },
    {
        "id": "a427f32e1f4fe70f",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.title",
                "pt": "msg",
                "to": "$join([msg.payload.Modbus, $replace(msg.payload.Range,\" \",\"\"),msg.payload.Register], \"\\t-\\t\")\t\t    ",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.description",
                "pt": "msg",
                "to": "payload.Notes",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.isChecked",
                "pt": "msg",
                "to": "$boolean(payload.Modbus in $globalContext(\"configuration.pollregisters\"))\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 240,
        "wires": [
            [
                "d8a4aa8ee0ca5d7e"
            ]
        ]
    },
    {
        "id": "982ee36b118d7dab",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "set_coils",
        "rules": [
            {
                "t": "set",
                "p": "modbusRegisters.coils",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "f91bd9060f202015",
        "type": "switch",
        "z": "b068bca0a71c83ad",
        "name": "CheckIfGlobalModbusRegistersExist",
        "property": "modbusRegisters",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 560,
        "wires": [
            [
                "a30882ca40ddcb96",
                "d2b2e4cf8d8c3e71"
            ],
            [
                "f59486e77d622519",
                "d2b2e4cf8d8c3e71"
            ]
        ]
    },
    {
        "id": "7fbb434c04404fd9",
        "type": "comment",
        "z": "b068bca0a71c83ad",
        "name": "Save object as global variable",
        "info": "For later use when parsing responses etc.",
        "x": 140,
        "y": 500,
        "wires": []
    },
    {
        "id": "a30882ca40ddcb96",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "CreateGlobalModbusRegisters",
        "rules": [
            {
                "t": "set",
                "p": "modbusRegisters",
                "pt": "global",
                "to": "{\"coils\":[],\"discreteInputs\":[],\"inputRegisters\":[],\"holdingRegisters\":[]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 540,
        "wires": [
            [
                "f59486e77d622519"
            ]
        ]
    },
    {
        "id": "f59486e77d622519",
        "type": "switch",
        "z": "b068bca0a71c83ad",
        "name": "CheckEntityType",
        "property": "$substringBefore(payload[0].Modbus, \":\")\t",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 190,
        "y": 780,
        "wires": [
            [
                "982ee36b118d7dab"
            ],
            [
                "65ebb3460f8edc99"
            ],
            [
                "d98a7a1b55a66e21"
            ],
            [
                "ebd2246293a65ba9"
            ]
        ]
    },
    {
        "id": "65ebb3460f8edc99",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "set_discreteInputs",
        "rules": [
            {
                "t": "set",
                "p": "modbusRegisters.discreteInputs",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "d98a7a1b55a66e21",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "set_inputRegisters",
        "rules": [
            {
                "t": "set",
                "p": "modbusRegisters.inputRegisters",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "ebd2246293a65ba9",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "set_holdingRegisters",
        "rules": [
            {
                "t": "set",
                "p": "modbusRegisters.holdingRegisters",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "d8a4aa8ee0ca5d7e",
        "type": "join",
        "z": "b068bca0a71c83ad",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 890,
        "y": 240,
        "wires": [
            [
                "20c5410fafc60d1b"
            ]
        ]
    },
    {
        "id": "d67f2fed99d81c62",
        "type": "join",
        "z": "b068bca0a71c83ad",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 230,
        "y": 560,
        "wires": [
            [
                "f065b5dc137dda34"
            ]
        ]
    },
    {
        "id": "d2b2e4cf8d8c3e71",
        "type": "debug",
        "z": "b068bca0a71c83ad",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 580,
        "wires": []
    },
    {
        "id": "f065b5dc137dda34",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "remove first row",
        "rules": [
            {
                "t": "delete",
                "p": "payload[0]",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 560,
        "wires": [
            [
                "f91bd9060f202015"
            ]
        ]
    },
    {
        "id": "eaa193ec5f7b54b6",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "createScalingAs1",
        "rules": [
            {
                "t": "set",
                "p": "payload.Scaling",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 160,
        "wires": [
            [
                "3d2c47c1f54d627e"
            ]
        ]
    },
    {
        "id": "92a91c1e65822c40",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "ExtractScaling",
        "rules": [
            {
                "t": "set",
                "p": "payload.Scaling",
                "pt": "msg",
                "to": "(\t$parsedValue := $number($replace($match(payload.Unit_original, /(^\\d[\\d\\.\\,]*)/, 1)[0].groups[0], \",\", \".\"));\t$parsedValue ? $parsedValue : 1\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 100,
        "wires": [
            [
                "3d2c47c1f54d627e"
            ]
        ]
    },
    {
        "id": "b71aac05593c0684",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "parseUnit",
        "rules": [
            {
                "t": "move",
                "p": "payload.Unit",
                "pt": "msg",
                "to": "payload.Unit_original",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.Unit",
                "pt": "msg",
                "to": "(\t$parsedValue := $trim($match(payload.Unit_original, /([^0-9^\\,^\\.^\\s]+)/, 1)[0].groups[0]);\t$parsedValue ? $parsedValue : \"\"\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 100,
        "wires": [
            [
                "92a91c1e65822c40"
            ]
        ]
    },
    {
        "id": "4183a63b8d3d8e4e",
        "type": "switch",
        "z": "b068bca0a71c83ad",
        "name": "",
        "property": "payload.Max",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 100,
        "wires": [
            [
                "43ae4a02987cea44"
            ],
            [
                "88518574a3ff97db"
            ]
        ]
    },
    {
        "id": "43ae4a02987cea44",
        "type": "switch",
        "z": "b068bca0a71c83ad",
        "name": "",
        "property": "$substring($trim(payload.Max), 0, 2)\t",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0x",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 60,
        "wires": [
            [
                "49195c3ec6f65511"
            ],
            [
                "88518574a3ff97db"
            ]
        ]
    },
    {
        "id": "49195c3ec6f65511",
        "type": "change",
        "z": "b068bca0a71c83ad",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.Max",
                "pt": "msg",
                "to": "$parseInteger(payload.Max, \"16\")",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 40,
        "wires": [
            [
                "88518574a3ff97db"
            ]
        ]
    },
    {
        "id": "2e23ab8ecab2488f",
        "type": "change",
        "z": "dcbfaf3f8ee1d934",
        "name": "AddElementToArray",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t$pollregisters := $globalContext(\"configuration.pollregisters\");\t$not(payload.Modbus in $pollregisters) ? $append($pollregisters, payload.Modbus) ~> $distinct() ~> $sort() : $pollregisters\t)\t ",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 360,
        "wires": [
            [
                "7b24f58438b9411d",
                "51f3bc0740f6152f"
            ]
        ]
    },
    {
        "id": "7b24f58438b9411d",
        "type": "debug",
        "z": "dcbfaf3f8ee1d934",
        "name": "debug_addedReadRegister",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 360,
        "wires": []
    },
    {
        "id": "11cde03e3f6caf8e",
        "type": "change",
        "z": "dcbfaf3f8ee1d934",
        "name": "RemoveElementFromArray",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t\t$pollregisters := $globalContext(\"configuration.pollregisters\");\t\t/*if last item in list to be removed send empty list\t*/\t$count($pollregisters) = 1 and payload.Modbus in $pollregisters ? [] :\t$pollregisters[$not($$.payload.Modbus in $)]\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 480,
        "wires": [
            [
                "df0b1aea89e06904",
                "51f3bc0740f6152f"
            ]
        ]
    },
    {
        "id": "3c690955ed69bea2",
        "type": "switch",
        "z": "dcbfaf3f8ee1d934",
        "name": "ReadSwitchIsChecked",
        "property": "payload.isChecked",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 380,
        "wires": [
            [
                "2e23ab8ecab2488f",
                "8e1d69d361a439f6"
            ],
            [
                "11cde03e3f6caf8e",
                "c9cb2ca0ed43dcb4"
            ]
        ]
    },
    {
        "id": "981f685cdfb60b97",
        "type": "change",
        "z": "dcbfaf3f8ee1d934",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "configuration.pollregisters",
                "pt": "global",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "df0b1aea89e06904",
        "type": "debug",
        "z": "dcbfaf3f8ee1d934",
        "name": "debug_RemovedReadRegister",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 480,
        "wires": []
    },
    {
        "id": "51f3bc0740f6152f",
        "type": "switch",
        "z": "dcbfaf3f8ee1d934",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "undefined",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 420,
        "wires": [
            [
                "03cde4d6d67c7f21"
            ]
        ]
    },
    {
        "id": "03cde4d6d67c7f21",
        "type": "rbe",
        "z": "dcbfaf3f8ee1d934",
        "name": "FilterUnchanged",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 840,
        "y": 420,
        "wires": [
            [
                "981f685cdfb60b97"
            ]
        ]
    },
    {
        "id": "46aa70efd0ebb978",
        "type": "comment",
        "z": "dcbfaf3f8ee1d934",
        "name": "AddMQTT",
        "info": "",
        "x": 440,
        "y": 240,
        "wires": []
    },
    {
        "id": "8e1d69d361a439f6",
        "type": "subflow:8a3abaeed43492c7",
        "z": "dcbfaf3f8ee1d934",
        "name": "ModbusRegister2MQTT",
        "x": 490,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c9cb2ca0ed43dcb4",
        "type": "subflow:45fbecf1fa8ca370",
        "z": "dcbfaf3f8ee1d934",
        "name": "",
        "x": 490,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "69771ecb93a65689",
        "type": "comment",
        "z": "dcbfaf3f8ee1d934",
        "name": "RemoveMQTT",
        "info": "",
        "x": 440,
        "y": 520,
        "wires": []
    },
    {
        "id": "7bdc7439ba84ef72",
        "type": "function",
        "z": "c0f18c4adc5a6baf",
        "name": "GetInfoForExtAddress",
        "func": "var modbusRegisters = global.get(\"modbusRegisters\");\nvar entityRegisters = [];\n\n// identify which entity type to look for the address in\nvar entitytype = msg.payload.split(\":\")[0];\n\n// Get all registers for this entity type\nswitch (entitytype) {\n    case \"0\":\n        entityRegisters = modbusRegisters.coils;\n        break;\n    case \"1\":\n        entityRegisters = modbusRegisters.discreteInputs;\n        break;\n    case \"3\":\n        entityRegisters = modbusRegisters.inputRegisters;\n        break;\n    case \"4\":\n        entityRegisters = modbusRegisters.holdingRegisters;\n        break;\n    default:\n        break;\n}\n\n// If register is found, add it as modbusRegisterInfo object to msg.\nfor (var e of entityRegisters) {\n    // Check if extended address matches\n    if ( e.Modbus === msg.payload) {\n        msg.payload = e;\n        return msg;\n    }\n}\nnode.warn(\"failed to find Info for modbus register: \" + msg.payload + \", using entitytype: \" + entitytype + \", with entityregisters: \" + entityRegisters);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 80,
        "wires": [
            []
        ],
        "inputLabels": [
            "Ext address (string)"
        ]
    },
    {
        "id": "a845d460e3659c45",
        "type": "switch",
        "z": "c0f18c4adc5a6baf",
        "name": "ModbusRegisterInfoAvailable",
        "property": "modbusRegisters",
        "propertyType": "global",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 100,
        "wires": [
            [
                "7bdc7439ba84ef72"
            ],
            [
                "dd9aaacb2cb9d18f"
            ]
        ]
    },
    {
        "id": "dd9aaacb2cb9d18f",
        "type": "delay",
        "z": "c0f18c4adc5a6baf",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "a845d460e3659c45"
            ]
        ]
    },
    {
        "id": "198e45beb15e5cce",
        "type": "change",
        "z": "8a3abaeed43492c7",
        "name": "mqtt_topic_attributes",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext(\"configuration.mqtt.topic\") &\t\"/Modbus/\" & payload.Modbus & \"/attributes\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 80,
        "wires": [
            [
                "9292031b208c4e71"
            ]
        ]
    },
    {
        "id": "9292031b208c4e71",
        "type": "template",
        "z": "8a3abaeed43492c7",
        "name": "set_mqtt_attributes",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"ExtAddress\": \"{{payload.Modbus}}\",\n    \"Name\": \"{{payload.Register}}\",\n    \"Range\": \"{{payload.Range}}\",\n    \"Min\": {{payload.Min}},\n    \"Max\": {{payload.Max}},\n    \"Unit\": \"{{payload.Unit}}\",\n    \"Scaling\": {{payload.Scaling}},\n    \"Note\": \"{{payload.Notes}}\"\n}",
        "output": "json",
        "x": 1310,
        "y": 80,
        "wires": [
            [
                "c5945bd2ba2f633d"
            ]
        ]
    },
    {
        "id": "31d3f37765609c67",
        "type": "template",
        "z": "8a3abaeed43492c7",
        "name": "set_mqtt_ha_config",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"name\": \"LKICS2 {{payload.Register}}  ({{payload.Range}})\",\n    \"state_topic\": \"{{global.configuration.mqtt.topic}}/Modbus/{{payload.Modbus}}/value\",\n    \"payload_on\": \"1\",\n    \"payload_off\": \"0\",\n    \"unit_of_measurement\": \"{{payload.Unit}}\",\n    \"json_attributes_topic\": \"{{global.configuration.mqtt.topic}}/Modbus/{{payload.Modbus}}/attributes\",\n    \"availability\": [\n        {\n            \"topic\": \"{{global.configuration.mqtt.topic}}/Modbus/{{payload.Modbus}}/status\",\n            \"payload_available\": \"ok\",\n            \"payload_not_available\": \"error\"\n        },\n        {\n            \"topic\": \"{{global.configuration.mqtt.topic}}/connected\",\n            \"payload_available\": \"true\",\n            \"payload_not_available\": \"false\"\n        }\n    ],\n    \"availability_mode\": \"all\",\n    \"expire_after\": 122,\n    \"unique_id\": \"LKICS2_1_{{payload.Modbus}}\",\n    \"device\": {\n        \"name\": \"LK-ICS2\",\n        \"manufacturer\": \"LK\",\n        \"model\": \"ICS2\",\n        \"via_device\": \"LKICS2_CLIENT_NODERED\",\n        \"identifiers\": [\"LKICS2\"],\n        \"configuration_url\": \"http://{{global.hostname}}:1880/ui/#!/1\",\n        \"connections\": [[\"Hostname\", \"{{global.hostname}}\"]]\n    }\n}    \n   \n\n",
        "output": "json",
        "x": 1310,
        "y": 200,
        "wires": [
            [
                "c5945bd2ba2f633d"
            ]
        ]
    },
    {
        "id": "38bd41289795be88",
        "type": "switch",
        "z": "8a3abaeed43492c7",
        "name": "checkMaxValue",
        "property": "payload.Max",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 220,
        "wires": [
            [
                "395d8ff9888ba93f"
            ],
            [
                "475b1de4ce84af6d"
            ]
        ]
    },
    {
        "id": "395d8ff9888ba93f",
        "type": "change",
        "z": "8a3abaeed43492c7",
        "name": "binary_sensor",
        "rules": [
            {
                "t": "set",
                "p": "ha_sensorType",
                "pt": "msg",
                "to": "binary_sensor",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 200,
        "wires": [
            [
                "eed04fe29927cb5c"
            ]
        ]
    },
    {
        "id": "475b1de4ce84af6d",
        "type": "change",
        "z": "8a3abaeed43492c7",
        "name": "sensor",
        "rules": [
            {
                "t": "set",
                "p": "ha_sensorType",
                "pt": "msg",
                "to": "sensor",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 240,
        "wires": [
            [
                "eed04fe29927cb5c"
            ]
        ]
    },
    {
        "id": "05dcf3d1a5d91138",
        "type": "switch",
        "z": "8a3abaeed43492c7",
        "name": "IfMqttEnabled",
        "property": "configuration.mqtt.enable",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "198e45beb15e5cce",
                "1885dad6d8ebaed1"
            ]
        ]
    },
    {
        "id": "1885dad6d8ebaed1",
        "type": "switch",
        "z": "8a3abaeed43492c7",
        "name": "If_HA_Enabled",
        "property": "configuration.mqtt.homeassistant",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 220,
        "wires": [
            [
                "38bd41289795be88"
            ]
        ]
    },
    {
        "id": "eed04fe29927cb5c",
        "type": "change",
        "z": "8a3abaeed43492c7",
        "name": "mqtt_topic_ha_config",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "\"homeassistant/\" & ha_sensorType & \"/\" & $globalContext(\"configuration.mqtt.topic\") & \"/\" & $replace(payload.Modbus, \":\", \"\") & \"/config\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 200,
        "wires": [
            [
                "31d3f37765609c67"
            ]
        ]
    },
    {
        "id": "f9b9c907792b21eb",
        "type": "comment",
        "z": "8a3abaeed43492c7",
        "name": "Add homeassistant MQTT config",
        "info": "",
        "x": 490,
        "y": 180,
        "wires": []
    },
    {
        "id": "c5945bd2ba2f633d",
        "type": "change",
        "z": "8a3abaeed43492c7",
        "name": "set_retain",
        "rules": [
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1620,
        "y": 140,
        "wires": [
            [
                "871fb8048751bdeb"
            ]
        ]
    },
    {
        "id": "1ad7adc127a0f945",
        "type": "comment",
        "z": "8a3abaeed43492c7",
        "name": "Add MQTT topic with attributes Retained",
        "info": "",
        "x": 540,
        "y": 40,
        "wires": []
    },
    {
        "id": "871fb8048751bdeb",
        "type": "debug",
        "z": "8a3abaeed43492c7",
        "d": true,
        "name": "debug_MQTTaddRegister",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 280,
        "wires": []
    },
    {
        "id": "88c8bac36917df6a",
        "type": "change",
        "z": "45fbecf1fa8ca370",
        "name": "mqtt_topic_attributes",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext(\"configuration.mqtt.topic\") &\t\"/Modbus/\" & payload.Modbus & \"/attributes\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "bdf3af714f3697c5"
            ]
        ]
    },
    {
        "id": "4c5889d407682304",
        "type": "comment",
        "z": "45fbecf1fa8ca370",
        "name": "RemoveRetainedMQTT",
        "info": "",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "bdf3af714f3697c5",
        "type": "change",
        "z": "45fbecf1fa8ca370",
        "name": "set_empty_payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 120,
        "wires": [
            [
                "be4bf82fd1047c10"
            ]
        ]
    },
    {
        "id": "be4bf82fd1047c10",
        "type": "change",
        "z": "45fbecf1fa8ca370",
        "name": "set_retain",
        "rules": [
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 120,
        "wires": [
            [
                "ba569f47e9921d2c"
            ]
        ]
    },
    {
        "id": "f13966848e73bd6f",
        "type": "change",
        "z": "45fbecf1fa8ca370",
        "name": "mqtt_topic_ha_config",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "\"homeassistant/\" & ha_sensorType & \"/\" & \t$globalContext(\"configuration.mqtt.topic\") & \t\"/\" & $replace(payload.Modbus, \":\", \"\") & \"/config\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 280,
        "wires": [
            [
                "bdf3af714f3697c5"
            ]
        ]
    },
    {
        "id": "ba569f47e9921d2c",
        "type": "debug",
        "z": "45fbecf1fa8ca370",
        "d": true,
        "name": "debug_MQTTremove",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 200,
        "wires": []
    },
    {
        "id": "ebc1de458dcaaec0",
        "type": "switch",
        "z": "45fbecf1fa8ca370",
        "name": "checkMaxValue",
        "property": "payload.Max",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 280,
        "wires": [
            [
                "9e0ca30c8963d1a3"
            ],
            [
                "bd9b6681ce9f19e8"
            ]
        ]
    },
    {
        "id": "9e0ca30c8963d1a3",
        "type": "change",
        "z": "45fbecf1fa8ca370",
        "name": "binary_sensor",
        "rules": [
            {
                "t": "set",
                "p": "ha_sensorType",
                "pt": "msg",
                "to": "binary_sensor",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 260,
        "wires": [
            [
                "f13966848e73bd6f"
            ]
        ]
    },
    {
        "id": "bd9b6681ce9f19e8",
        "type": "change",
        "z": "45fbecf1fa8ca370",
        "name": "sensor",
        "rules": [
            {
                "t": "set",
                "p": "ha_sensorType",
                "pt": "msg",
                "to": "sensor",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 300,
        "wires": [
            [
                "f13966848e73bd6f"
            ]
        ]
    },
    {
        "id": "3db632a1e320cc99",
        "type": "XLSX-to-json",
        "z": "2eab96853f83d487",
        "name": "xlsx to json",
        "filepath": "LK_ICS2_GW_CLIENT_NODERED/ICS.2 Modbus Registers 2019-01-10.xlsx",
        "rangecell": "",
        "columnkey": "",
        "sheet": "Coils",
        "x": 350,
        "y": 380,
        "wires": [
            [
                "81d7bc16f4a57ded"
            ]
        ]
    },
    {
        "id": "36ac9a74b8bba331",
        "type": "inject",
        "z": "2eab96853f83d487",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "3db632a1e320cc99",
                "13b08b7b836e5ef4",
                "d15205a364ef30d6",
                "93c62d754db4100e"
            ]
        ]
    },
    {
        "id": "0ee919ba1492bd85",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "Read excel file with available registers",
        "info": "",
        "x": 150,
        "y": 300,
        "wires": []
    },
    {
        "id": "1f860201244eec1b",
        "type": "file in",
        "z": "2eab96853f83d487",
        "name": "Read_configuration.json",
        "filename": "LK_ICS2_GW_CLIENT_NODERED/configuration.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 670,
        "y": 100,
        "wires": [
            [
                "ad52e6543d7cb1d7"
            ]
        ]
    },
    {
        "id": "ad52e6543d7cb1d7",
        "type": "json",
        "z": "2eab96853f83d487",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 890,
        "y": 100,
        "wires": [
            [
                "48e676539e8ffc3e",
                "02c23ad14591cb35"
            ]
        ]
    },
    {
        "id": "e44a4a64dd05e9b0",
        "type": "inject",
        "z": "2eab96853f83d487",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "1f860201244eec1b"
            ]
        ]
    },
    {
        "id": "48e676539e8ffc3e",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_configurationRead",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 100,
        "wires": []
    },
    {
        "id": "eccddff22243f62c",
        "type": "ui_list",
        "z": "2eab96853f83d487",
        "group": "bce0984ac2260b3e",
        "name": "List_coils",
        "order": 1,
        "width": 12,
        "height": 6,
        "lineType": "three",
        "actionType": "switch",
        "allowHTML": false,
        "outputs": 1,
        "topic": "Topic",
        "x": 800,
        "y": 380,
        "wires": [
            [
                "f5b19a9a56900f21",
                "133d42f3bcdee066"
            ]
        ]
    },
    {
        "id": "f5b19a9a56900f21",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_selected_coils",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 400,
        "wires": []
    },
    {
        "id": "9875c42ef911b20b",
        "type": "modbus-flex-getter",
        "z": "2eab96853f83d487",
        "name": "modbusFlexGetter_GW",
        "showStatusActivities": false,
        "showErrors": true,
        "logIOActivities": false,
        "server": "d9c8fbc7fe792503",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "x": 1270,
        "y": 2320,
        "wires": [
            [],
            [
                "33a1a144cd9cbe78",
                "901766b1a784b661"
            ]
        ]
    },
    {
        "id": "33a1a144cd9cbe78",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_flex_getter_GW",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 2320,
        "wires": []
    },
    {
        "id": "cf400da4ace546e3",
        "type": "tcp in",
        "z": "2eab96853f83d487",
        "name": "",
        "server": "server",
        "host": "",
        "port": "502",
        "datamode": "stream",
        "datatype": "buffer",
        "newline": "",
        "topic": "",
        "base64": false,
        "tls": "",
        "x": 90,
        "y": 2220,
        "wires": [
            [
                "373971ff24c512ac",
                "060a436a7a758a10"
            ]
        ]
    },
    {
        "id": "373971ff24c512ac",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_tcp_in_502",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 2220,
        "wires": []
    },
    {
        "id": "26d7b7e6fb5d2ed5",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "Modbus GW TCP <--> RTU",
        "info": "",
        "x": 140,
        "y": 2160,
        "wires": []
    },
    {
        "id": "3c34561ebd42bb01",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "Read json file with configuration",
        "info": "Consider using node-red storage instead",
        "x": 130,
        "y": 20,
        "wires": []
    },
    {
        "id": "8535c5f78a357910",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "HW config - Select USB device",
        "info": "",
        "x": 150,
        "y": 2460,
        "wires": []
    },
    {
        "id": "0af11897d2d0b61d",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "configuration.device",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 2520,
        "wires": [
            [
                "decc82e3ccac32a0",
                "2d1bee509f483cb4"
            ]
        ]
    },
    {
        "id": "150578beb3545869",
        "type": "ui_text_input",
        "z": "2eab96853f83d487",
        "name": "ModbusDevice",
        "label": "modbus device",
        "tooltip": "Set device for RS485 UART, i.g. /dev/ttyUSB0",
        "group": "fdb468a313bc97f7",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 560,
        "y": 2520,
        "wires": [
            [
                "0af11897d2d0b61d"
            ]
        ]
    },
    {
        "id": "895eb75328d88313",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "configuration.device",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 2520,
        "wires": [
            [
                "150578beb3545869"
            ]
        ]
    },
    {
        "id": "decc82e3ccac32a0",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_device_variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 2480,
        "wires": []
    },
    {
        "id": "2105a320c911d118",
        "type": "modbus-flex-connector",
        "z": "2eab96853f83d487",
        "name": "modbus_flex_connector",
        "maxReconnectsPerMinute": 4,
        "emptyQueue": false,
        "showStatusActivities": true,
        "showErrors": true,
        "server": "d9c8fbc7fe792503",
        "x": 670,
        "y": 2620,
        "wires": [
            [
                "d125f41d4464f504"
            ]
        ]
    },
    {
        "id": "d125f41d4464f504",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_flex_connector",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 2620,
        "wires": []
    },
    {
        "id": "2d1bee509f483cb4",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setRS485devCfg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.connectorType",
                "pt": "msg",
                "to": "SERIAL",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.serialPort",
                "pt": "msg",
                "to": "configuration.device",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "payload.serialBaudrate",
                "pt": "msg",
                "to": "38400",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.unitId",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 2620,
        "wires": [
            [
                "2105a320c911d118"
            ]
        ]
    },
    {
        "id": "84b60efa4ce02676",
        "type": "inject",
        "z": "2eab96853f83d487",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 2620,
        "wires": [
            [
                "2d1bee509f483cb4"
            ]
        ]
    },
    {
        "id": "967079c53a712a02",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "convertTCP2RTUReqCommon",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "req_payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.unitid",
                "pt": "msg",
                "to": "req_payload[6]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.fc",
                "pt": "msg",
                "to": "req_payload[7]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.address",
                "pt": "msg",
                "to": "(req_payload.\"8\" * $power(2, 8)) + req_payload.\"9\"\t\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 2220,
        "wires": [
            [
                "28156d5432ace452",
                "13e79409f9643df6"
            ]
        ]
    },
    {
        "id": "28156d5432ace452",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "ConvertTCP",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 2220,
        "wires": []
    },
    {
        "id": "060a436a7a758a10",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "CheckReqLength",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "12",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "12",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 2280,
        "wires": [
            [
                "d523dfb1f54b4eec"
            ],
            [
                "5c087999fafc928a"
            ]
        ]
    },
    {
        "id": "cdd24d35cfce5cf1",
        "type": "tcp out",
        "z": "2eab96853f83d487",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 1850,
        "y": 2240,
        "wires": []
    },
    {
        "id": "901766b1a784b661",
        "type": "function",
        "z": "2eab96853f83d487",
        "name": "AssembleModbusTCPResponse",
        "func": "let responseData = [];\n\nif (msg.hasOwnProperty('modbusRequest')) {\n    // received a successful Modbus read response\n    // UnitId - slave id\n    responseData.push(msg.modbusRequest.unitid);\n    // Function Code\n    responseData.push(msg.modbusRequest.fc);\n    // Add the register(s) data\n    for (let e of msg.payload.buffer) {\n        responseData.push(e);\n    }\n} else if (msg.values.hasOwnProperty('address')) {\n    // received successfil write response\n    // UnitId - slave id\n    responseData.push(msg.values.unitid);\n    // Function Code\n    responseData.push(msg.values.fc);\n    // register address\n    responseData.push((msg.values.address >> 8) & 0xFF);\n    responseData.push(msg.values.address & 0xFF);\n    // Add the register(s) data\n    responseData.push((msg.values.value >> 8) & 0xFF);\n    responseData.push(msg.values.value & 0xFF);\n} else if (msg.hasOwnProperty('error')) {\n    // Got error\n    if (msg.error.message.startsWith(\"Modbus exception\")) {\n        // Received modbus error\n        // slave address\n        responseData.push(msg.req_payload[6]);\n        // function code\n        responseData.push(msg.req_payload[7] | 0b10000000);\n        // exception code\n        let result = msg.error.message.match(/^Modbus exception\\s(\\d+)\\s*:/);\n        if (result != null) {\n            responseData.push(result[1]);\n        }\n    }\n} else if (msg.hasOwnProperty('tcpReqUnimplementedFC')) {\n    // coming straight from TCP req validation due to unimplemented FC \n    node.warn(\"Got unimplemented function code in TCP Req, replying with exception\");\n    // slave address\n    responseData.push(msg.req_payload[6]);\n    // function code\n    responseData.push(msg.req_payload[7] | 0b10000000);\n    // exception code\n    responseData.push(0x01); // 0x01 == Illegal function\n}\n\n\nif (responseData.length > 0) {\n    // create the response msg\n    var new_msg = JSON.parse(JSON.stringify(msg)); // deep copy to reuse the TCP req to get _session and ip e.t.c.\n    new_msg.payload = []; \n    new_msg.payload.push(msg.req_payload[0]); // Transaction Id 2 bytes set by client\n    new_msg.payload.push(msg.req_payload[1]);\n    new_msg.payload.push(0); // Protocol Id 2 bytes, always 0\n    new_msg.payload.push(0);\n    // Length 2 byte, UnitId (1byte) + FC (1byte) + register data\n    var length = responseData.length;\n    new_msg.payload.push((length >> 8) & 0xFF );\n    new_msg.payload.push(length & 0xFF);\n    // add either resp or error (responseData[] to new_msg.payload)\n    for (let e of responseData) {\n        new_msg.payload.push(e);\n    }\n    // Convert array to buffer for tcp out node\n    new_msg.payload = Buffer.from(new_msg.payload);\n    return new_msg;\n}\n\n// unknown input msg, do nothing\nreturn;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 2240,
        "wires": [
            [
                "cdd24d35cfce5cf1",
                "f0b9481f9c391dac"
            ]
        ]
    },
    {
        "id": "f0b9481f9c391dac",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_function_tcp_out",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 2320,
        "wires": []
    },
    {
        "id": "63a5e5ce3a41f18d",
        "type": "ui_button",
        "z": "2eab96853f83d487",
        "name": "buttonSaveConfig",
        "group": "4f3fcc9c4da4f393",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "Save config changes persistantly to filesystem configuration.json",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "configuration",
        "payloadType": "global",
        "topic": "buttonSaveConfig",
        "topicType": "str",
        "x": 250,
        "y": 2800,
        "wires": [
            [
                "7f39d9583feb4ce1"
            ]
        ]
    },
    {
        "id": "66ff8c1a18c8d558",
        "type": "file",
        "z": "2eab96853f83d487",
        "name": "write_configuration.json",
        "filename": "LK_ICS2_GW_CLIENT_NODERED/configuration.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 2780,
        "wires": [
            [
                "18c77310f8cf080d"
            ]
        ]
    },
    {
        "id": "03f4a4ec8791a180",
        "type": "watch",
        "z": "2eab96853f83d487",
        "name": "watch_configuration.json",
        "files": "LK_ICS2_GW_CLIENT_NODERED/configuration.json",
        "recursive": "",
        "x": 410,
        "y": 120,
        "wires": [
            [
                "1f860201244eec1b"
            ]
        ]
    },
    {
        "id": "7f39d9583feb4ce1",
        "type": "json",
        "z": "2eab96853f83d487",
        "name": "convertConfigJSONtoString",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 480,
        "y": 2800,
        "wires": [
            [
                "942c9350ceeaf7b0",
                "66ff8c1a18c8d558"
            ]
        ]
    },
    {
        "id": "02c23ad14591cb35",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "configuration",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 20,
        "wires": [
            [
                "2f0e13e17929d853"
            ]
        ]
    },
    {
        "id": "942c9350ceeaf7b0",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_button_write_config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 2840,
        "wires": []
    },
    {
        "id": "0d8b797254104c3a",
        "type": "link in",
        "z": "2eab96853f83d487",
        "name": "linkIn_refreshGUIdeviceText",
        "links": [
            "2f0e13e17929d853"
        ],
        "x": 135,
        "y": 2520,
        "wires": [
            [
                "895eb75328d88313"
            ]
        ]
    },
    {
        "id": "2f0e13e17929d853",
        "type": "link out",
        "z": "2eab96853f83d487",
        "name": "linkOut_configurationLoaded",
        "mode": "link",
        "links": [
            "0d8b797254104c3a",
            "22cf9016b54be651",
            "affcfba0cb319026"
        ],
        "x": 1275,
        "y": 20,
        "wires": []
    },
    {
        "id": "da5b3b09e7d1e75e",
        "type": "ui_toast",
        "z": "2eab96853f83d487",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Config stored to disk",
        "name": "notification_configSaved",
        "x": 1290,
        "y": 2780,
        "wires": []
    },
    {
        "id": "18c77310f8cf080d",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Successfully updated configuration.json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 2780,
        "wires": [
            [
                "da5b3b09e7d1e75e"
            ]
        ]
    },
    {
        "id": "39d07160081ce3c4",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "HW config - save to disk",
        "info": "",
        "x": 130,
        "y": 2720,
        "wires": []
    },
    {
        "id": "81d7bc16f4a57ded",
        "type": "subflow:b068bca0a71c83ad",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 590,
        "y": 380,
        "wires": [
            [
                "eccddff22243f62c"
            ]
        ]
    },
    {
        "id": "13b08b7b836e5ef4",
        "type": "XLSX-to-json",
        "z": "2eab96853f83d487",
        "name": "xlsx to json",
        "filepath": "LK_ICS2_GW_CLIENT_NODERED/ICS.2 Modbus Registers 2019-01-10.xlsx",
        "rangecell": "",
        "columnkey": "",
        "sheet": "Inputs",
        "x": 350,
        "y": 480,
        "wires": [
            [
                "db1cd250c3e6a9b4"
            ]
        ]
    },
    {
        "id": "bafeb36fec1f2ff0",
        "type": "ui_list",
        "z": "2eab96853f83d487",
        "group": "708d28b7894d44a4",
        "name": "List_Inputs",
        "order": 1,
        "width": 12,
        "height": 6,
        "lineType": "three",
        "actionType": "switch",
        "allowHTML": false,
        "outputs": 1,
        "topic": "Topic",
        "x": 810,
        "y": 480,
        "wires": [
            [
                "19936d81be7cc27b",
                "ad39675b8cc80566"
            ]
        ]
    },
    {
        "id": "19936d81be7cc27b",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_selected_inputs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 500,
        "wires": []
    },
    {
        "id": "db1cd250c3e6a9b4",
        "type": "subflow:b068bca0a71c83ad",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 590,
        "y": 480,
        "wires": [
            [
                "bafeb36fec1f2ff0"
            ]
        ]
    },
    {
        "id": "d15205a364ef30d6",
        "type": "XLSX-to-json",
        "z": "2eab96853f83d487",
        "name": "xlsx to json",
        "filepath": "LK_ICS2_GW_CLIENT_NODERED/ICS.2 Modbus Registers 2019-01-10.xlsx",
        "rangecell": "",
        "columnkey": "",
        "sheet": "Input Registers",
        "x": 350,
        "y": 580,
        "wires": [
            [
                "f38aa02662174564"
            ]
        ]
    },
    {
        "id": "d3c5f9b29dee32f6",
        "type": "ui_list",
        "z": "2eab96853f83d487",
        "group": "c38ca1e60640f844",
        "name": "List_InputRegisters",
        "order": 1,
        "width": 12,
        "height": 6,
        "lineType": "three",
        "actionType": "switch",
        "allowHTML": false,
        "outputs": 1,
        "topic": "Topic",
        "x": 830,
        "y": 580,
        "wires": [
            [
                "5b17c000827aece8",
                "d7339096f2b1a9ec"
            ]
        ]
    },
    {
        "id": "5b17c000827aece8",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_selected_InputRegisters",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 600,
        "wires": []
    },
    {
        "id": "f38aa02662174564",
        "type": "subflow:b068bca0a71c83ad",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 590,
        "y": 580,
        "wires": [
            [
                "d3c5f9b29dee32f6"
            ]
        ]
    },
    {
        "id": "93c62d754db4100e",
        "type": "XLSX-to-json",
        "z": "2eab96853f83d487",
        "name": "xlsx to json",
        "filepath": "LK_ICS2_GW_CLIENT_NODERED/ICS.2 Modbus Registers 2019-01-10.xlsx",
        "rangecell": "",
        "columnkey": "",
        "sheet": "Holding Registers",
        "x": 350,
        "y": 680,
        "wires": [
            [
                "2d133b0a6a5a4989"
            ]
        ]
    },
    {
        "id": "39925163b3ab5f44",
        "type": "ui_list",
        "z": "2eab96853f83d487",
        "group": "66546b0ac0ae1558",
        "name": "List_holdingRegisters",
        "order": 1,
        "width": 12,
        "height": 6,
        "lineType": "three",
        "actionType": "switch",
        "allowHTML": false,
        "outputs": 1,
        "topic": "Topic",
        "x": 840,
        "y": 680,
        "wires": [
            [
                "cda28fa6c7b80d92",
                "e36d78829570b276"
            ]
        ]
    },
    {
        "id": "cda28fa6c7b80d92",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_selected_HoldingRegisters",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 700,
        "wires": []
    },
    {
        "id": "2d133b0a6a5a4989",
        "type": "subflow:b068bca0a71c83ad",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 590,
        "y": 680,
        "wires": [
            [
                "39925163b3ab5f44"
            ]
        ]
    },
    {
        "id": "133d42f3bcdee066",
        "type": "subflow:dcbfaf3f8ee1d934",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 1090,
        "y": 360,
        "wires": [
            [
                "1b669a470165f074"
            ],
            [
                "0906901eb067669f"
            ]
        ]
    },
    {
        "id": "ad39675b8cc80566",
        "type": "subflow:dcbfaf3f8ee1d934",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 1090,
        "y": 460,
        "wires": [
            [
                "1b669a470165f074"
            ],
            [
                "0906901eb067669f"
            ]
        ]
    },
    {
        "id": "d7339096f2b1a9ec",
        "type": "subflow:dcbfaf3f8ee1d934",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "1b669a470165f074"
            ],
            [
                "0906901eb067669f"
            ]
        ]
    },
    {
        "id": "e36d78829570b276",
        "type": "subflow:dcbfaf3f8ee1d934",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 1160,
        "y": 660,
        "wires": [
            [
                "1b669a470165f074"
            ],
            [
                "0906901eb067669f"
            ]
        ]
    },
    {
        "id": "b11ac5df61d09a11",
        "type": "inject",
        "z": "2eab96853f83d487",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 880,
        "wires": [
            [
                "e454629caccfce21"
            ]
        ]
    },
    {
        "id": "edbf385cf9e80e42",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "Poll registers",
        "info": "",
        "x": 70,
        "y": 800,
        "wires": []
    },
    {
        "id": "af3a2d636f4624ab",
        "type": "split",
        "z": "2eab96853f83d487",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 920,
        "wires": [
            [
                "9bb01872b337b9db"
            ]
        ]
    },
    {
        "id": "116d84b498be71d8",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.fc",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 860,
        "wires": [
            [
                "c5389344bc241d2b"
            ]
        ]
    },
    {
        "id": "301081d37d8b0e89",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "",
        "property": "$substringBefore(Modbus, \":\")\t",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1130,
        "y": 920,
        "wires": [
            [
                "116d84b498be71d8"
            ],
            [
                "bac2611c7dc46520"
            ],
            [
                "d58a649ea298a625"
            ],
            [
                "5580fef22167a61a"
            ]
        ]
    },
    {
        "id": "9bb01872b337b9db",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "Modbus",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 920,
        "wires": [
            [
                "db9d0168ad911070"
            ]
        ]
    },
    {
        "id": "bac2611c7dc46520",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.fc",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 900,
        "wires": [
            [
                "c5389344bc241d2b"
            ]
        ]
    },
    {
        "id": "d58a649ea298a625",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.fc",
                "pt": "msg",
                "to": "4",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 940,
        "wires": [
            [
                "c5389344bc241d2b"
            ]
        ]
    },
    {
        "id": "5580fef22167a61a",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.fc",
                "pt": "msg",
                "to": "3",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 980,
        "wires": [
            [
                "c5389344bc241d2b"
            ]
        ]
    },
    {
        "id": "c5389344bc241d2b",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setAddress_polling",
        "rules": [
            {
                "t": "set",
                "p": "payload.address",
                "pt": "msg",
                "to": "(\t($substringAfter(Modbus, \":\") ~> \t$number()) -1\t)\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1570,
        "y": 920,
        "wires": [
            [
                "758fce6511ad63a0",
                "633795079cbdfc32"
            ]
        ]
    },
    {
        "id": "758fce6511ad63a0",
        "type": "modbus-flex-getter",
        "z": "2eab96853f83d487",
        "name": "ModbusFlexGetter_polling",
        "showStatusActivities": false,
        "showErrors": true,
        "logIOActivities": false,
        "server": "d9c8fbc7fe792503",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "x": 350,
        "y": 1100,
        "wires": [
            [],
            [
                "53d20bad761668b5",
                "90a6dcd4a964a38b"
            ]
        ]
    },
    {
        "id": "53d20bad761668b5",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_flex_getter_polling",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1b669a470165f074",
        "type": "link out",
        "z": "2eab96853f83d487",
        "name": "addedModbus",
        "mode": "link",
        "links": [
            "57173a16777b9774"
        ],
        "x": 1365,
        "y": 360,
        "wires": []
    },
    {
        "id": "57173a16777b9774",
        "type": "link in",
        "z": "2eab96853f83d487",
        "name": "ReadModbus",
        "links": [
            "1b669a470165f074"
        ],
        "x": 115,
        "y": 980,
        "wires": [
            [
                "8a864cedeb25240e"
            ]
        ]
    },
    {
        "id": "c52ed96881c6d57c",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "Dashboard show read values",
        "info": "",
        "x": 120,
        "y": 1200,
        "wires": []
    },
    {
        "id": "22ce8d2843afb8fd",
        "type": "ui_table",
        "z": "2eab96853f83d487",
        "group": "76a1a38f75f938d6",
        "name": "table_showPolledValues",
        "order": 0,
        "width": "30",
        "height": "6",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1390,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8a864cedeb25240e",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Modbus",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 980,
        "wires": [
            [
                "e454629caccfce21"
            ]
        ]
    },
    {
        "id": "633795079cbdfc32",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_req_polling",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 860,
        "wires": []
    },
    {
        "id": "a0ba7e33097363f8",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "modbusRespPayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 1280,
        "wires": [
            [
                "012c2f2ff8c0e569"
            ]
        ]
    },
    {
        "id": "bc2c2682c294bd9f",
        "type": "template",
        "z": "2eab96853f83d487",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"id\": \"{{modbusRegisterInfo.Modbus}}\",\n    \"Name\": \"{{modbusRegisterInfo.Register}}  ({{modbusRegisterInfo.Range}})\",\n    \"Value\": {{physicalValue}},\n    \"Timestamp\": \"{{timestampISOstring}}\"\n}\n\n    ",
        "output": "json",
        "x": 1140,
        "y": 1340,
        "wires": [
            [
                "5d620deeec5d7208",
                "f49a3ab968d16616"
            ]
        ]
    },
    {
        "id": "95020861edc63d12",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "CheckIfError",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1120,
        "wires": [
            [
                "3e2544089ee8aac1",
                "f8aec22624b60cae",
                "c1a5de6f7889d202"
            ],
            [
                "a0ba7e33097363f8"
            ]
        ]
    },
    {
        "id": "3e2544089ee8aac1",
        "type": "debug",
        "z": "2eab96853f83d487",
        "g": "a3b444cd358a83f8",
        "name": "debug_polling_error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1060,
        "wires": []
    },
    {
        "id": "fc2dc13c67f7296f",
        "type": "ui_text",
        "z": "2eab96853f83d487",
        "g": "a3b444cd358a83f8",
        "group": "a9ef42c8c3d06309",
        "order": 0,
        "width": "30",
        "height": "2",
        "name": "gui_text_error",
        "label": "{{msg.Modbus}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1320,
        "y": 1100,
        "wires": []
    },
    {
        "id": "f8aec22624b60cae",
        "type": "change",
        "z": "2eab96853f83d487",
        "g": "a3b444cd358a83f8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 1100,
        "wires": [
            [
                "fc2dc13c67f7296f"
            ]
        ]
    },
    {
        "id": "4024d11f6aa6c212",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "publish to mqtt broker",
        "info": "",
        "x": 100,
        "y": 1580,
        "wires": []
    },
    {
        "id": "5b3825d64452e470",
        "type": "mqtt out",
        "z": "2eab96853f83d487",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "89f1348330b22bdb",
        "x": 1330,
        "y": 1740,
        "wires": []
    },
    {
        "id": "90b8527c794f8f28",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "mqtt_topic_json",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext(\"configuration.mqtt.topic\") &\t\"/Modbus/\" & Modbus & \"/\" & \"json\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 1660,
        "wires": [
            [
                "5b3825d64452e470",
                "6d6d5e5d61cf7b38"
            ]
        ]
    },
    {
        "id": "5d620deeec5d7208",
        "type": "join",
        "z": "2eab96853f83d487",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1150,
        "y": 1260,
        "wires": [
            [
                "22ce8d2843afb8fd",
                "6a4da22c6b12e1db"
            ]
        ]
    },
    {
        "id": "c1a5de6f7889d202",
        "type": "template",
        "z": "2eab96853f83d487",
        "g": "a3b444cd358a83f8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"id\": \"{{Modbus}}\",\n    \"Name\": \"{{modbusRegisterInfo.Register}}  ({{modbusRegisterInfo.Range}})\",\n    \"Value\": \"ERROR: {{error.message}}\",\n    \"Timestamp\": \"{{timestampISOstring}}\"\n}\n    ",
        "output": "json",
        "x": 1020,
        "y": 1140,
        "wires": [
            [
                "5d620deeec5d7208",
                "47c8c9b113c8f54f"
            ]
        ]
    },
    {
        "id": "6a4da22c6b12e1db",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_gui_readvaluestable",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1240,
        "wires": []
    },
    {
        "id": "61069f3f84b96e38",
        "type": "template",
        "z": "2eab96853f83d487",
        "name": "",
        "field": "broker",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"broker\": \"{{global.configuration.mqtt.host}}\",\n    \"port\": \"{{global.configuration.mqtt.port}}\",\n    \"force\": true\n}",
        "output": "json",
        "x": 760,
        "y": 1940,
        "wires": [
            [
                "e1cf6f85c58cebff"
            ]
        ]
    },
    {
        "id": "5799e1c2f7675b6f",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "mqtt_connect",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "connect",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 1940,
        "wires": [
            [
                "61069f3f84b96e38"
            ]
        ]
    },
    {
        "id": "0118c69336695c98",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_mqtt_connect",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1920,
        "wires": []
    },
    {
        "id": "1fbffaeccc885fa5",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "mqtt_disconnect",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "disconnect",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 2060,
        "wires": [
            [
                "5b3825d64452e470",
                "6c27c276e4ff6a84"
            ]
        ]
    },
    {
        "id": "492593bb54334ce2",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "",
        "property": "configuration.mqtt.enable",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 2040,
        "wires": [
            [
                "5799e1c2f7675b6f",
                "7aaba7570777c38d",
                "dc4e5acac47be021"
            ],
            [
                "886d985f01a420f1",
                "7320962f8156cf79",
                "b70cbdfc939924a8"
            ]
        ]
    },
    {
        "id": "22cf9016b54be651",
        "type": "link in",
        "z": "2eab96853f83d487",
        "name": "",
        "links": [
            "2f0e13e17929d853"
        ],
        "x": 315,
        "y": 2040,
        "wires": [
            [
                "492593bb54334ce2",
                "8d985606f6319479"
            ]
        ]
    },
    {
        "id": "e9753ff8c78fd980",
        "type": "inject",
        "z": "2eab96853f83d487",
        "name": "REMOVE ME",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 2100,
        "wires": [
            [
                "492593bb54334ce2"
            ]
        ]
    },
    {
        "id": "6d6d5e5d61cf7b38",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_mqtt_publish",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 1860,
        "wires": []
    },
    {
        "id": "90a6dcd4a964a38b",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "timestampISOstring",
                "pt": "msg",
                "to": "$fromMillis(timestamp)\t\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 1120,
        "wires": [
            [
                "95020861edc63d12"
            ]
        ]
    },
    {
        "id": "af25e5f16ce3241a",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "HW config - MQTT settings",
        "info": "",
        "x": 110,
        "y": 2960,
        "wires": []
    },
    {
        "id": "4706177d51713893",
        "type": "ui_form",
        "z": "2eab96853f83d487",
        "name": "gui_form_mqtt",
        "label": "",
        "group": "9345a4c286b1ebb3",
        "order": 1,
        "width": 12,
        "height": 4,
        "options": [
            {
                "label": "Enable MQTT",
                "value": "mqtt_enable",
                "type": "switch",
                "required": true,
                "rows": null
            },
            {
                "label": "Publish Home Assistant topics",
                "value": "mqtt_ha",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Hostname / IP",
                "value": "mqtt_host",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Port",
                "value": "mqtt_port",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Username",
                "value": "mqtt_user",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Password",
                "value": "mqtt_pass",
                "type": "password",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "mqtt_enable": false,
            "mqtt_ha": false,
            "mqtt_host": "",
            "mqtt_port": "",
            "mqtt_user": "",
            "mqtt_pass": ""
        },
        "payload": "",
        "submit": "confirm",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 660,
        "y": 3080,
        "wires": [
            [
                "6ab59c9e1644116d",
                "e89badb35053e835"
            ]
        ]
    },
    {
        "id": "6ab59c9e1644116d",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_gui_form_mqtt",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 3080,
        "wires": []
    },
    {
        "id": "1849a5b073d41af0",
        "type": "ui_ui_control",
        "z": "2eab96853f83d487",
        "name": "",
        "events": "all",
        "x": 140,
        "y": 3200,
        "wires": [
            [
                "f05ad6bbe40a4dfd",
                "e26f07d8a1285a25"
            ]
        ]
    },
    {
        "id": "f05ad6bbe40a4dfd",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.mqtt_enable",
                "pt": "msg",
                "to": "configuration.mqtt.enable",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "payload.mqtt_host",
                "pt": "msg",
                "to": "configuration.mqtt.host",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "payload.mqtt_port",
                "pt": "msg",
                "to": "configuration.mqtt.port",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "payload.mqtt_user",
                "pt": "msg",
                "to": "configuration.mqtt.user",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "payload.mqtt_pass",
                "pt": "msg",
                "to": "configuration.mqtt.pass",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "payload.mqtt_ha",
                "pt": "msg",
                "to": "configuration.mqtt.homeassistant",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 3080,
        "wires": [
            [
                "4706177d51713893",
                "2f8b747b43ff9add"
            ]
        ]
    },
    {
        "id": "2f8b747b43ff9add",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_refresh_gui_form_mqtt",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 3020,
        "wires": []
    },
    {
        "id": "e89badb35053e835",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "configuration.mqtt.enable",
                "pt": "global",
                "to": "payload.mqtt_enable",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "configuration.mqtt.homeassistant",
                "pt": "global",
                "to": "payload.mqtt_ha",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "configuration.mqtt.host",
                "pt": "global",
                "to": "payload.mqtt_host",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "configuration.mqtt.port",
                "pt": "global",
                "to": "payload.mqtt_port",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "configuration.mqtt.user",
                "pt": "global",
                "to": "payload.mqtt_user",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "configuration.mqtt.pass",
                "pt": "global",
                "to": "payload.mqtt_pass",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 3160,
        "wires": [
            [
                "f05ad6bbe40a4dfd",
                "44f311dd567bb809",
                "fc7be12b11973fd8"
            ]
        ]
    },
    {
        "id": "2095e697df83e0fd",
        "type": "function",
        "z": "2eab96853f83d487",
        "d": true,
        "name": "FindRegisterInfoForResponse",
        "func": "var modbusRegisters = global.get(\"modbusRegisters\");\nvar entityRegisters = [];\n\n// Find which entity type to look for the address in\nswitch (msg.modbusRequest.fc) {\n    case 1:\n        entityRegisters = modbusRegisters.coils;\n        break;\n    case 2:\n        entityRegisters = modbusRegisters.discreteInputs;\n        break;\n    case 3:\n        entityRegisters = modbusRegisters.holdingRegisters;\n        break;\n    case 4:\n        entityRegisters = modbusRegisters.inputRegisters;\n        break;\n    default:\n        break;\n}\n\nfor (var e of entityRegisters) {\n    // Check if address matches\n    var address_str = e.Modbus.substring(e.Modbus.indexOf(\":\") + 1);\n    var address = Number(address_str);\n    if ( address === msg.modbusRequest.address) {\n        msg.modbusRegisterInfo = e;\n        return msg;\n    }\n}\nnode.warn(\"failed to find match!!!  Last substring used: \" + address_str + \"  As number: \" + address );\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "b304d95076be0482",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "mqtt_topic_register",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext(\"configuration.mqtt.topic\") &\t\"/Modbus/\" & Modbus",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1760,
        "wires": [
            [
                "5b3825d64452e470",
                "6d6d5e5d61cf7b38"
            ]
        ]
    },
    {
        "id": "2d34dc21d43f7f1b",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setValue",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "physicalValue",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1740,
        "wires": [
            [
                "b304d95076be0482",
                "affc7cd320160649"
            ]
        ]
    },
    {
        "id": "6b75c505ea485af3",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "mqtt_topic_status",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext(\"configuration.mqtt.topic\") &\t\"/Modbus/\" & Modbus & \"/\" & \"status\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1820,
        "wires": [
            [
                "5b3825d64452e470",
                "6d6d5e5d61cf7b38"
            ]
        ]
    },
    {
        "id": "67d1426c87aa9f73",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setStatus_ok",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ok",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 1820,
        "wires": [
            [
                "6b75c505ea485af3"
            ]
        ]
    },
    {
        "id": "d1aa55aa24198224",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "connect to mqtt broker",
        "info": "",
        "x": 100,
        "y": 1920,
        "wires": []
    },
    {
        "id": "b0245cc0a07981ea",
        "type": "ui_toast",
        "z": "2eab96853f83d487",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "MQTT settings changed",
        "name": "notification_MQTTchanged",
        "x": 1340,
        "y": 3160,
        "wires": []
    },
    {
        "id": "012c2f2ff8c0e569",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "checkMaxValue",
        "property": "modbusRegisterInfo.Max",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 1280,
        "wires": [
            [
                "50b2d9e2eea6fa5b"
            ],
            [
                "6933d4a7c69a3b96"
            ]
        ]
    },
    {
        "id": "fa6510621a2d0164",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setPhysicalValue",
        "rules": [
            {
                "t": "set",
                "p": "physicalValue",
                "pt": "msg",
                "to": "$round(modbusRespPayload.data[0] * modbusRegisterInfo.Scaling, 1)\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 1260,
        "wires": [
            [
                "bc2c2682c294bd9f"
            ]
        ]
    },
    {
        "id": "6933d4a7c69a3b96",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "checkScaling",
        "property": "modbusRegisterInfo.Scaling",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 1280,
        "wires": [
            [
                "fa6510621a2d0164"
            ],
            [
                "097cfa651459680d"
            ]
        ]
    },
    {
        "id": "097cfa651459680d",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setPhysicalValue",
        "rules": [
            {
                "t": "set",
                "p": "physicalValue",
                "pt": "msg",
                "to": "modbusRespPayload.data[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 1320,
        "wires": [
            [
                "bc2c2682c294bd9f"
            ]
        ]
    },
    {
        "id": "50b2d9e2eea6fa5b",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setPhysicalValue",
        "rules": [
            {
                "t": "set",
                "p": "physicalValue",
                "pt": "msg",
                "to": "$number(modbusRespPayload.data[0])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 1220,
        "wires": [
            [
                "bc2c2682c294bd9f"
            ]
        ]
    },
    {
        "id": "affc7cd320160649",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "mqtt_topic_value",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext(\"configuration.mqtt.topic\") &\t\"/Modbus/\" & Modbus & \"/value\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1720,
        "wires": [
            [
                "5b3825d64452e470",
                "6d6d5e5d61cf7b38"
            ]
        ]
    },
    {
        "id": "9b28c8f78ae1496d",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setValue_raw",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "modbusRespPayload.data[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 1880,
        "wires": [
            [
                "cc97b8360e94f5b8"
            ]
        ]
    },
    {
        "id": "cc97b8360e94f5b8",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "mqtt_topic_value_raw",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext(\"configuration.mqtt.topic\") &\t\"/Modbus/\" & Modbus & \"/value_raw\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 1880,
        "wires": [
            [
                "5b3825d64452e470",
                "6d6d5e5d61cf7b38"
            ]
        ]
    },
    {
        "id": "0906901eb067669f",
        "type": "link out",
        "z": "2eab96853f83d487",
        "name": "link_out_mqtt_publish_registerpollchange",
        "mode": "link",
        "links": [
            "981e2a33a64d5692"
        ],
        "x": 1565,
        "y": 520,
        "wires": []
    },
    {
        "id": "981e2a33a64d5692",
        "type": "link in",
        "z": "2eab96853f83d487",
        "name": "MQTT_out",
        "links": [
            "0906901eb067669f"
        ],
        "x": 1235,
        "y": 1800,
        "wires": [
            [
                "5b3825d64452e470"
            ]
        ]
    },
    {
        "id": "e454629caccfce21",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "configuration.pollregisters",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 920,
        "wires": [
            [
                "af3a2d636f4624ab"
            ]
        ]
    },
    {
        "id": "f49a3ab968d16616",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "IfMqttEnabled",
        "property": "configuration.mqtt.enable",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 520,
        "y": 1580,
        "wires": [
            [
                "90b8527c794f8f28",
                "2d34dc21d43f7f1b",
                "67d1426c87aa9f73",
                "9b28c8f78ae1496d"
            ]
        ]
    },
    {
        "id": "d6250a4a83b1ce15",
        "type": "change",
        "z": "2eab96853f83d487",
        "g": "004befd4e4171dac",
        "name": "setStatus_error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 1560,
        "wires": [
            [
                "b304d95076be0482",
                "6b75c505ea485af3",
                "99c0b21b1f3971b0"
            ]
        ]
    },
    {
        "id": "47c8c9b113c8f54f",
        "type": "switch",
        "z": "2eab96853f83d487",
        "g": "004befd4e4171dac",
        "name": "IfMqttEnabled",
        "property": "configuration.mqtt.enable",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1140,
        "y": 1460,
        "wires": [
            [
                "90b8527c794f8f28",
                "d6250a4a83b1ce15"
            ]
        ]
    },
    {
        "id": "8189851345054053",
        "type": "change",
        "z": "2eab96853f83d487",
        "g": "004befd4e4171dac",
        "name": "mqtt_topic_errormessage",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext(\"configuration.mqtt.topic\") &\t\"/Modbus/\" & Modbus & \"/\" & \"errormessage\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1590,
        "y": 1620,
        "wires": [
            [
                "5b3825d64452e470",
                "6d6d5e5d61cf7b38"
            ]
        ]
    },
    {
        "id": "99c0b21b1f3971b0",
        "type": "change",
        "z": "2eab96853f83d487",
        "g": "004befd4e4171dac",
        "name": "setErrormsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 1620,
        "wires": [
            [
                "8189851345054053"
            ]
        ]
    },
    {
        "id": "44f311dd567bb809",
        "type": "link out",
        "z": "2eab96853f83d487",
        "name": "link_out_mqtt_changed",
        "mode": "link",
        "links": [
            "91c16d5e000dd48f"
        ],
        "x": 1045,
        "y": 3220,
        "wires": []
    },
    {
        "id": "91c16d5e000dd48f",
        "type": "link in",
        "z": "2eab96853f83d487",
        "name": "",
        "links": [
            "44f311dd567bb809"
        ],
        "x": 315,
        "y": 2000,
        "wires": [
            [
                "492593bb54334ce2",
                "89c80d055eeb8171"
            ]
        ]
    },
    {
        "id": "7aaba7570777c38d",
        "type": "delay",
        "z": "2eab96853f83d487",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1230,
        "y": 2000,
        "wires": [
            [
                "abfdba4f2fc4c5c6"
            ]
        ]
    },
    {
        "id": "d128a860b7c0f552",
        "type": "split",
        "z": "2eab96853f83d487",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1590,
        "y": 2000,
        "wires": [
            [
                "6342f40920dc086d"
            ]
        ]
    },
    {
        "id": "abfdba4f2fc4c5c6",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "configuration.pollregisters",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1420,
        "y": 2000,
        "wires": [
            [
                "d128a860b7c0f552"
            ]
        ]
    },
    {
        "id": "ca5da9bd72c40a5f",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "create MQTT retained config/attribute topics",
        "info": "",
        "x": 1350,
        "y": 1960,
        "wires": []
    },
    {
        "id": "db9d0168ad911070",
        "type": "subflow:c0f18c4adc5a6baf",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 760,
        "y": 920,
        "wires": [
            [
                "51d09e7ab0dc212b"
            ]
        ]
    },
    {
        "id": "6342f40920dc086d",
        "type": "subflow:c0f18c4adc5a6baf",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 1800,
        "y": 2000,
        "wires": [
            [
                "37f18eb1a3a7b3b0"
            ]
        ]
    },
    {
        "id": "51d09e7ab0dc212b",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "modbusRegisterInfo",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"fc\":1,\"unitid\":1,\"address\":0,\"quantity\":1}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 920,
        "wires": [
            [
                "301081d37d8b0e89"
            ]
        ]
    },
    {
        "id": "37f18eb1a3a7b3b0",
        "type": "subflow:8a3abaeed43492c7",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 2050,
        "y": 2000,
        "wires": [
            [
                "5b3825d64452e470"
            ]
        ]
    },
    {
        "id": "7a55e0de788d364c",
        "type": "subflow:45fbecf1fa8ca370",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 1210,
        "y": 2100,
        "wires": [
            [
                "5b3825d64452e470"
            ]
        ]
    },
    {
        "id": "886d985f01a420f1",
        "type": "delay",
        "z": "2eab96853f83d487",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 2060,
        "wires": [
            [
                "1fbffaeccc885fa5"
            ]
        ]
    },
    {
        "id": "bd6aad78b5efc8c3",
        "type": "split",
        "z": "2eab96853f83d487",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 2100,
        "wires": [
            [
                "cd634c1a7ac148e0"
            ]
        ]
    },
    {
        "id": "7320962f8156cf79",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "configuration.pollregisters",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 2100,
        "wires": [
            [
                "bd6aad78b5efc8c3"
            ]
        ]
    },
    {
        "id": "fc7be12b11973fd8",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Changed MQTT settings",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 3160,
        "wires": [
            [
                "b0245cc0a07981ea"
            ]
        ]
    },
    {
        "id": "cd634c1a7ac148e0",
        "type": "subflow:c0f18c4adc5a6baf",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 920,
        "y": 2100,
        "wires": [
            [
                "7a55e0de788d364c"
            ]
        ]
    },
    {
        "id": "e1cf6f85c58cebff",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "IFusername",
        "property": "configuration.mqtt.user",
        "propertyType": "global",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 1940,
        "wires": [
            [
                "5b3825d64452e470",
                "0118c69336695c98"
            ],
            [
                "faf25a6f035bba93"
            ]
        ]
    },
    {
        "id": "faf25a6f035bba93",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setMQTTuserPass",
        "rules": [
            {
                "t": "set",
                "p": "broker.username",
                "pt": "msg",
                "to": "configuration.mqtt.user",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "broker.password",
                "pt": "msg",
                "to": "configuration.mqtt.pass",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 2000,
        "wires": [
            [
                "5b3825d64452e470",
                "0118c69336695c98"
            ]
        ]
    },
    {
        "id": "13e79409f9643df6",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "check_FC",
        "property": "payload.fc",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 800,
        "y": 2340,
        "wires": [
            [
                "3e75dcef4edd3da0"
            ],
            [
                "3e75dcef4edd3da0"
            ],
            [
                "3e75dcef4edd3da0"
            ],
            [
                "3e75dcef4edd3da0"
            ],
            [
                "edca3633e4140378"
            ],
            [
                "edca3633e4140378"
            ]
        ]
    },
    {
        "id": "3e75dcef4edd3da0",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "convertTCPtoGetReq",
        "rules": [
            {
                "t": "set",
                "p": "payload.quantity",
                "pt": "msg",
                "to": "(req_payload.\"10\" * $power(2, 8)) + req_payload.\"11\"\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 2280,
        "wires": [
            [
                "9875c42ef911b20b"
            ]
        ]
    },
    {
        "id": "edca3633e4140378",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "convertTCPtoWriteReq",
        "rules": [
            {
                "t": "set",
                "p": "payload.value",
                "pt": "msg",
                "to": "(req_payload.\"10\" * $power(2, 8)) + req_payload.\"11\"\t",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.quantity",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 2360,
        "wires": [
            [
                "af45b0cae98a9f86"
            ]
        ]
    },
    {
        "id": "af45b0cae98a9f86",
        "type": "modbus-flex-write",
        "z": "2eab96853f83d487",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "server": "d9c8fbc7fe792503",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "x": 1250,
        "y": 2400,
        "wires": [
            [],
            [
                "3b3c1713f3c7f3a8",
                "901766b1a784b661"
            ]
        ]
    },
    {
        "id": "3b3c1713f3c7f3a8",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_flex_write_GW",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 2400,
        "wires": []
    },
    {
        "id": "5c087999fafc928a",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "CheckIFwriteMultiple",
        "property": "payload[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "15",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "16",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 2360,
        "wires": [
            [
                "d7183145b41fb755",
                "7f64a740a388b9c6"
            ],
            [
                "d7183145b41fb755",
                "7f64a740a388b9c6"
            ]
        ]
    },
    {
        "id": "85e171ce0a8c363f",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setUnimplementedFC",
        "rules": [
            {
                "t": "set",
                "p": "tcpReqUnimplementedFC",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "req_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 2420,
        "wires": [
            [
                "901766b1a784b661"
            ]
        ]
    },
    {
        "id": "d523dfb1f54b4eec",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "ValidateTCPreqMBAP",
        "property": "payload.\"2\" = 0 and payload.\"3\" = 0 and /* Protocol ID, 0 = Modbus*/\tpayload.\"4\" = 0 and payload.\"5\" = 6 /* Length */",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 520,
        "y": 2260,
        "wires": [
            [
                "967079c53a712a02"
            ]
        ]
    },
    {
        "id": "d7183145b41fb755",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "ValidateTCPreqMBAP",
        "property": "payload.\"2\" = 0 and payload.\"3\" = 0 and /* Protocol ID, 0 = Modbus*/\t((payload.\"4\" * $power(2, 8)) + payload.\"5\") = (payload.length - 6)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 480,
        "y": 2420,
        "wires": [
            [
                "85e171ce0a8c363f"
            ]
        ]
    },
    {
        "id": "7f64a740a388b9c6",
        "type": "change",
        "z": "2eab96853f83d487",
        "d": true,
        "name": "test_REMOVE_ME",
        "rules": [
            {
                "t": "set",
                "p": "test_protocolID_OK",
                "pt": "msg",
                "to": "payload.\"2\" = 0 and payload.\"3\" = 0 ",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "test_lengthField",
                "pt": "msg",
                "to": "(payload.\"4\" * $power(2, 8)) + payload.\"5\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "test_payloadLengthCompareValue",
                "pt": "msg",
                "to": "payload.length - 6",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "3a7a8c17276419ea",
        "type": "comment",
        "z": "2eab96853f83d487",
        "name": "gui_write_register",
        "info": "",
        "x": 90,
        "y": 3300,
        "wires": []
    },
    {
        "id": "2248f145ee74d521",
        "type": "ui_dropdown",
        "z": "2eab96853f83d487",
        "name": "gui_selectWriteFC",
        "label": "Select Modbus entity to write",
        "tooltip": "",
        "place": "Select option",
        "group": "f211501605bcc8f3",
        "order": 1,
        "width": "12",
        "height": "1",
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Write Single Coil (0x05)",
                "value": 5,
                "type": "num"
            },
            {
                "label": "Write Single Register (0x06)",
                "value": "6",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 350,
        "y": 3340,
        "wires": [
            [
                "e1445d8f1f92599c",
                "e26f07d8a1285a25"
            ]
        ]
    },
    {
        "id": "b1422ec4fc2e4eda",
        "type": "ui_dropdown",
        "z": "2eab96853f83d487",
        "name": "gui_selectWriteRegister",
        "label": "Select register ",
        "tooltip": "",
        "place": "Select option",
        "group": "f211501605bcc8f3",
        "order": 2,
        "width": "12",
        "height": "1",
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "fc",
        "topicType": "msg",
        "className": "",
        "x": 1890,
        "y": 3340,
        "wires": [
            [
                "e0b95ffbf2015167",
                "6ea2b6f35927d90f",
                "e26f07d8a1285a25"
            ]
        ]
    },
    {
        "id": "e1445d8f1f92599c",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "SelectedEntity",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 3340,
        "wires": [
            [
                "3fcb377bb4a596a1"
            ],
            [
                "cebac89310a7c916"
            ]
        ]
    },
    {
        "id": "3fcb377bb4a596a1",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "getCoils",
        "rules": [
            {
                "t": "set",
                "p": "fc",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "modbusRegisters.coils",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 3340,
        "wires": [
            [
                "3757f8ccd6f3b955"
            ]
        ]
    },
    {
        "id": "cebac89310a7c916",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "get_holdingRegisters",
        "rules": [
            {
                "t": "set",
                "p": "fc",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "modbusRegisters.holdingRegisters",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 3380,
        "wires": [
            [
                "3757f8ccd6f3b955"
            ]
        ]
    },
    {
        "id": "3757f8ccd6f3b955",
        "type": "split",
        "z": "2eab96853f83d487",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1130,
        "y": 3340,
        "wires": [
            [
                "e9e6f295d09413aa"
            ]
        ]
    },
    {
        "id": "df9953d06cbe2382",
        "type": "join",
        "z": "2eab96853f83d487",
        "name": "",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1470,
        "y": 3340,
        "wires": [
            [
                "9d620eb3bb30480a",
                "875311f225fd5851"
            ]
        ]
    },
    {
        "id": "e9e6f295d09413aa",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "assembleList",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{payload.Modbus & \" \" & \tpayload.Register & \" (\" & payload.Range & \")\"\t: payload.Modbus}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 3340,
        "wires": [
            [
                "df9953d06cbe2382"
            ]
        ]
    },
    {
        "id": "9d620eb3bb30480a",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_write_registersList",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 3280,
        "wires": []
    },
    {
        "id": "875311f225fd5851",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "options",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1650,
        "y": 3380,
        "wires": [
            [
                "b1422ec4fc2e4eda"
            ]
        ]
    },
    {
        "id": "e0b95ffbf2015167",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_selected_register",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 3280,
        "wires": []
    },
    {
        "id": "8c69b3aeea562d9e",
        "type": "ui_numeric",
        "z": "2eab96853f83d487",
        "name": "",
        "label": "Value to write:",
        "tooltip": "{{msg.tooltip}}",
        "group": "f211501605bcc8f3",
        "order": 2,
        "width": "6",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "65535",
        "step": 1,
        "className": "",
        "x": 2360,
        "y": 3400,
        "wires": [
            [
                "de201154667710cc",
                "7a0b28f135a8a702"
            ]
        ]
    },
    {
        "id": "de201154667710cc",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_write_inputValue_out",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2620,
        "y": 3400,
        "wires": []
    },
    {
        "id": "019ce1fed366e10a",
        "type": "modbus-flex-write",
        "z": "2eab96853f83d487",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "server": "d9c8fbc7fe792503",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "x": 1390,
        "y": 3600,
        "wires": [
            [],
            [
                "d331b3e815315077",
                "0d4777bc5916303c"
            ]
        ]
    },
    {
        "id": "6ea2b6f35927d90f",
        "type": "subflow:c0f18c4adc5a6baf",
        "z": "2eab96853f83d487",
        "name": "",
        "x": 1900,
        "y": 3420,
        "wires": [
            [
                "cf05aa0afdcc8691",
                "32caf2bbf6541b2f"
            ]
        ]
    },
    {
        "id": "cf05aa0afdcc8691",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setValueConfig2Spec",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"min\":0,\"max\":65535}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "ui_control.max",
                "pt": "msg",
                "to": "payload.Max",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ui_control.format",
                "pt": "msg",
                "to": "\"{{msg.payload}} \" & payload.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "ui_control.tooltip",
                "pt": "msg",
                "to": "payload.Notes",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tooltip",
                "pt": "msg",
                "to": "payload.Notes",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "modbusInfo",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2140,
        "y": 3400,
        "wires": [
            [
                "8c69b3aeea562d9e",
                "e3eb9b92f4f854e7",
                "9ffd3b800a899429"
            ]
        ]
    },
    {
        "id": "3bbdf21f9e8ba8c2",
        "type": "ui_text",
        "z": "2eab96853f83d487",
        "group": "f211501605bcc8f3",
        "order": 3,
        "width": "18",
        "height": "1",
        "name": "",
        "label": "Description:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 2450,
        "y": 3520,
        "wires": []
    },
    {
        "id": "32caf2bbf6541b2f",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "getNotes",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Notes",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2140,
        "y": 3520,
        "wires": [
            [
                "3bbdf21f9e8ba8c2",
                "ddd8c16de7df8452"
            ]
        ]
    },
    {
        "id": "e3eb9b92f4f854e7",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_write_inputToValueToWrite",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2420,
        "y": 3460,
        "wires": []
    },
    {
        "id": "ddd8c16de7df8452",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_write_inputToValuesTextDescription",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 3560,
        "wires": []
    },
    {
        "id": "78f02a464d513a85",
        "type": "template",
        "z": "2eab96853f83d487",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"value\": {{flow.modbusWriteReq.value_write_raw}},\n    \"fc\": {{fc}}, \n    \"unitid\": 1,\n    \"address\": {{address}},\n    \"quantity\": 1\n}",
        "output": "json",
        "x": 1160,
        "y": 3600,
        "wires": [
            [
                "9f5784b88da87668",
                "019ce1fed366e10a"
            ]
        ]
    },
    {
        "id": "b849e401e37363d5",
        "type": "ui_button",
        "z": "2eab96853f83d487",
        "name": "",
        "group": "f211501605bcc8f3",
        "order": 4,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "send",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "modbusWriteReq",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 2910,
        "y": 3440,
        "wires": [
            [
                "8219259f6027bfbe"
            ]
        ]
    },
    {
        "id": "9ffd3b800a899429",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "save_modbusWriteReq",
        "rules": [
            {
                "t": "set",
                "p": "modbusWriteReq",
                "pt": "flow",
                "to": "modbusInfo",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2390,
        "y": 3320,
        "wires": [
            []
        ]
    },
    {
        "id": "7a0b28f135a8a702",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "set_value_write_physical",
        "rules": [
            {
                "t": "set",
                "p": "modbusWriteReq.value_write_physical",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2650,
        "y": 3360,
        "wires": [
            [
                "b849e401e37363d5"
            ]
        ]
    },
    {
        "id": "e26f07d8a1285a25",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "disableWriteButton",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2690,
        "y": 3180,
        "wires": [
            [
                "b849e401e37363d5"
            ]
        ]
    },
    {
        "id": "0d52227626f4733b",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "validateNewSetValue",
        "property": "modbusWriteReq.value_write_raw",
        "propertyType": "flow",
        "rules": [
            {
                "t": "lte",
                "v": "modbusWriteReq.Max",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 3600,
        "wires": [
            [
                "05b2fe23aefc4749"
            ]
        ]
    },
    {
        "id": "05b2fe23aefc4749",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "checkFC",
        "property": "$number($substring($flowContext(\"modbusWriteReq\").\tModbus, 0, 1))",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 3600,
        "wires": [
            [
                "2e64482ab1d604be"
            ],
            [
                "f5a43c7b35faacac"
            ]
        ]
    },
    {
        "id": "2e64482ab1d604be",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "coil_fc5",
        "rules": [
            {
                "t": "set",
                "p": "fc",
                "pt": "msg",
                "to": "5",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 3580,
        "wires": [
            [
                "f467dd94f35890e2"
            ]
        ]
    },
    {
        "id": "f5a43c7b35faacac",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "register_fc6",
        "rules": [
            {
                "t": "set",
                "p": "fc",
                "pt": "msg",
                "to": "6",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 3620,
        "wires": [
            [
                "f467dd94f35890e2"
            ]
        ]
    },
    {
        "id": "f467dd94f35890e2",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setAddress",
        "rules": [
            {
                "t": "set",
                "p": "address",
                "pt": "msg",
                "to": "$number($substring($flowContext(\"modbusWriteReq\").Modbus, 2)) - 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 3600,
        "wires": [
            [
                "78f02a464d513a85"
            ]
        ]
    },
    {
        "id": "9f5784b88da87668",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_WriteReqFromDashboard",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 3680,
        "wires": []
    },
    {
        "id": "d331b3e815315077",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_WriteResponse",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 3680,
        "wires": []
    },
    {
        "id": "c017b3986908383e",
        "type": "ui_text",
        "z": "2eab96853f83d487",
        "group": "f211501605bcc8f3",
        "order": 5,
        "width": "12",
        "height": "1",
        "name": "",
        "label": "Response: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2050,
        "y": 3600,
        "wires": []
    },
    {
        "id": "0d4777bc5916303c",
        "type": "switch",
        "z": "2eab96853f83d487",
        "name": "CheckIfError",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 3580,
        "wires": [
            [
                "a39770e3e1a08b5a"
            ],
            [
                "e26f07d8a1285a25",
                "65326c5d7aeb49d5"
            ]
        ]
    },
    {
        "id": "a39770e3e1a08b5a",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "error.message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1840,
        "y": 3560,
        "wires": [
            [
                "c017b3986908383e"
            ]
        ]
    },
    {
        "id": "65326c5d7aeb49d5",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Successfull write. New value: \" & values.value",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1840,
        "y": 3620,
        "wires": [
            [
                "c017b3986908383e"
            ]
        ]
    },
    {
        "id": "8219259f6027bfbe",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "setRawWriteValue",
        "rules": [
            {
                "t": "set",
                "p": "modbusWriteReq.value_write_raw",
                "pt": "flow",
                "to": "($modbusWriteReq := $flowContext(\"modbusWriteReq\");\t$modbusWriteReq.value_write_physical / $modbusWriteReq.Scaling\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 3600,
        "wires": [
            [
                "0d52227626f4733b"
            ]
        ]
    },
    {
        "id": "affcfba0cb319026",
        "type": "link in",
        "z": "2eab96853f83d487",
        "name": "linkIn_refreshGUIdeviceText",
        "links": [
            "2f0e13e17929d853"
        ],
        "x": 185,
        "y": 3120,
        "wires": [
            [
                "f05ad6bbe40a4dfd"
            ]
        ]
    },
    {
        "id": "ebca64a1377384eb",
        "type": "exec",
        "z": "2eab96853f83d487",
        "command": "hostname",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 580,
        "y": 200,
        "wires": [
            [
                "377c046cb8fc3c57"
            ],
            [],
            []
        ]
    },
    {
        "id": "42f44062c5e42c29",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "hostname_backup",
        "rules": [
            {
                "t": "set",
                "p": "hostname",
                "pt": "global",
                "to": "LKICS2.local",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 200,
        "wires": [
            [
                "ebca64a1377384eb"
            ]
        ]
    },
    {
        "id": "377c046cb8fc3c57",
        "type": "change",
        "z": "2eab96853f83d487",
        "name": "hostname_dyn",
        "rules": [
            {
                "t": "set",
                "p": "hostname",
                "pt": "global",
                "to": "$trim(payload)\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4498b61beb99aba8",
        "type": "inject",
        "z": "2eab96853f83d487",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "42f44062c5e42c29"
            ]
        ]
    },
    {
        "id": "8d985606f6319479",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_config_reloaded",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 2140,
        "wires": []
    },
    {
        "id": "89c80d055eeb8171",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_mqtt_changed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 348,
        "y": 1948,
        "wires": []
    },
    {
        "id": "dc4e5acac47be021",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_mqtt_enabled",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1980,
        "wires": []
    },
    {
        "id": "b70cbdfc939924a8",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_mqtt_NOT_enabled",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 2160,
        "wires": []
    },
    {
        "id": "6c27c276e4ff6a84",
        "type": "debug",
        "z": "2eab96853f83d487",
        "name": "debug_mqtt_DISCONNECT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 2060,
        "wires": []
    },
    {
        "id": "95655692eb1b029b",
        "type": "http in",
        "z": "2d2723d863d43125",
        "name": "test",
        "url": "/test",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "322979c0367b1440",
                "f9366bae12f29d4b"
            ]
        ]
    },
    {
        "id": "6009a2334e8e11a0",
        "type": "http response",
        "z": "2d2723d863d43125",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 770,
        "y": 280,
        "wires": []
    },
    {
        "id": "d1f6d5eeaa064d39",
        "type": "comment",
        "z": "2d2723d863d43125",
        "name": "HTTP endpoint /test",
        "info": "",
        "x": 110,
        "y": 100,
        "wires": []
    },
    {
        "id": "322979c0367b1440",
        "type": "json",
        "z": "2d2723d863d43125",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 370,
        "y": 220,
        "wires": [
            [
                "f9366bae12f29d4b",
                "b95721e1d6711c48"
            ]
        ]
    },
    {
        "id": "f9366bae12f29d4b",
        "type": "debug",
        "z": "2d2723d863d43125",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 180,
        "wires": []
    },
    {
        "id": "b95721e1d6711c48",
        "type": "change",
        "z": "2d2723d863d43125",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "Michael",
                "fromt": "str",
                "to": "PS",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 260,
        "wires": [
            [
                "6009a2334e8e11a0",
                "f9366bae12f29d4b"
            ]
        ]
    },
    {
        "id": "2e171e3b7ac16f9d",
        "type": "change",
        "z": "2d2723d863d43125",
        "name": "ExtractScaling",
        "rules": [
            {
                "t": "set",
                "p": "payload.Scaling",
                "pt": "msg",
                "to": "(\t$parsedValue := $number($replace($match(payload.Unit_original, /(^\\d[\\d\\.\\,]*)/, 1)[0].groups[0], \",\", \".\"));\t$parsedValue ? $parsedValue : 1\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 500,
        "wires": [
            [
                "df49b8c7a402d46e",
                "dbc4bd6a49203603"
            ]
        ]
    },
    {
        "id": "cb271d6c50aa38f3",
        "type": "change",
        "z": "2d2723d863d43125",
        "name": "parseUnit",
        "rules": [
            {
                "t": "move",
                "p": "payload.Unit",
                "pt": "msg",
                "to": "payload.Unit_original",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.Unit",
                "pt": "msg",
                "to": "(\t$parsedValue := $trim($match(payload.Unit_original, /([^0-9^\\,^\\.^\\s]+)/, 1)[0].groups[0]);\t$parsedValue ? $parsedValue : \"\"\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 500,
        "wires": [
            [
                "2e171e3b7ac16f9d",
                "b0e1d476e0cbf266"
            ]
        ]
    },
    {
        "id": "18b897440b88a4b6",
        "type": "split",
        "z": "2d2723d863d43125",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 540,
        "wires": [
            [
                "d47c8abf923229a7"
            ]
        ]
    },
    {
        "id": "ce9ee108140a442d",
        "type": "inject",
        "z": "2d2723d863d43125",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "modbusRegisters.inputRegisters",
        "payloadType": "global",
        "x": 170,
        "y": 540,
        "wires": [
            [
                "18b897440b88a4b6",
                "6713a1ade53e4ccc",
                "c2a098c46e5bf19a",
                "3fa3aa16726b12fb"
            ]
        ]
    },
    {
        "id": "1d392a72c4b61250",
        "type": "comment",
        "z": "2d2723d863d43125",
        "name": "parse Unit",
        "info": "",
        "x": 85,
        "y": 475,
        "wires": []
    },
    {
        "id": "df49b8c7a402d46e",
        "type": "function",
        "z": "2d2723d863d43125",
        "name": "functionNode",
        "func": "\nnode.log(msg.payload.Modbus + \": \" + msg.payload.Unit_original + \" = \" + msg.payload.Unit + \" / \" + msg.payload.Scaling +\"\\n\");\nvar array = flow.get(\"testUndefined\");\n\n// Number(msg.payload.Modbus.substring(2)) >= 11513 \n//\nif (msg.payload.Unit === undefined || msg.payload.Scaling === undefined ) {\n    array.push(msg.payload);\n}\n\nflow.set(\"testUndefined\", array);\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "6e0feaf87dc18c0e",
        "type": "debug",
        "z": "2d2723d863d43125",
        "name": "debug_Unit_not_existing",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 620,
        "wires": []
    },
    {
        "id": "d47c8abf923229a7",
        "type": "switch",
        "z": "2d2723d863d43125",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Unit",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 540,
        "wires": [
            [
                "8ed097a6bf09407f"
            ],
            [
                "6e0feaf87dc18c0e"
            ]
        ]
    },
    {
        "id": "8ed097a6bf09407f",
        "type": "switch",
        "z": "2d2723d863d43125",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "undefined",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 520,
        "wires": [
            [
                "cb271d6c50aa38f3"
            ],
            [
                "12b203408f3289d3"
            ]
        ]
    },
    {
        "id": "12b203408f3289d3",
        "type": "debug",
        "z": "2d2723d863d43125",
        "name": "debug_Unit_undefined",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 560,
        "wires": []
    },
    {
        "id": "b0e1d476e0cbf266",
        "type": "change",
        "z": "2d2723d863d43125",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "test",
                "pt": "flow",
                "to": "($test := $flowContext(\"test\");\t\t$test := $append(payload, $test)\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "6713a1ade53e4ccc",
        "type": "change",
        "z": "2d2723d863d43125",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "test",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "dbc4bd6a49203603",
        "type": "change",
        "z": "2d2723d863d43125",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "test2",
                "pt": "flow",
                "to": "($test := $flowContext(\"test2\");\t\t$test := $append(payload, $test)\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c2a098c46e5bf19a",
        "type": "change",
        "z": "2d2723d863d43125",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "test2",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "3fa3aa16726b12fb",
        "type": "change",
        "z": "2d2723d863d43125",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "testUndefined",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 433.75,
        "y": 372.5,
        "wires": [
            []
        ]
    },
    {
        "id": "58458de8ace86f9c",
        "type": "comment",
        "z": "2d2723d863d43125",
        "name": "hex value as string to int",
        "info": "",
        "x": 150,
        "y": 700,
        "wires": []
    },
    {
        "id": "9f49595dbc1bdb90",
        "type": "change",
        "z": "2d2723d863d43125",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$parseInteger(\"0xffff\", \"16\")\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "63d1722896e17095",
        "type": "change",
        "z": "2d2723d863d43125",
        "d": true,
        "name": "getHostname",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "HOSTNAME",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 40,
        "wires": [
            [
                "af28bfd9a9a297e0"
            ]
        ]
    },
    {
        "id": "3072e10ec5f084eb",
        "type": "inject",
        "z": "2d2723d863d43125",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "63d1722896e17095",
                "de544c36fa6d06c1"
            ]
        ]
    },
    {
        "id": "af28bfd9a9a297e0",
        "type": "debug",
        "z": "2d2723d863d43125",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 40,
        "wires": []
    },
    {
        "id": "de544c36fa6d06c1",
        "type": "exec",
        "z": "2d2723d863d43125",
        "command": "hostname",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "af28bfd9a9a297e0"
            ],
            [],
            []
        ]
    },
    {
        "id": "7a1e2c1fa67711ae",
        "type": "ui_table",
        "z": "ac3e1af7236de124",
        "group": "69774bfce923ece5",
        "name": "",
        "order": 0,
        "width": "17",
        "height": "9",
        "columns": [
            {
                "field": "id",
                "title": "id",
                "width": "",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "text",
                "title": "Text",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 810,
        "y": 400,
        "wires": [
            [
                "ae1d4b1ab7b49805",
                "516a5d12d4d76683"
            ]
        ]
    },
    {
        "id": "a99953ae23ac7be0",
        "type": "inject",
        "z": "ac3e1af7236de124",
        "name": "add @ top",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 174,
        "y": 298,
        "wires": [
            [
                "5e14b99dfb2ba5ab"
            ]
        ]
    },
    {
        "id": "3b24141414341858",
        "type": "debug",
        "z": "ac3e1af7236de124",
        "name": "addRow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 395,
        "y": 400,
        "wires": []
    },
    {
        "id": "5e14b99dfb2ba5ab",
        "type": "function",
        "z": "ac3e1af7236de124",
        "name": "addRow @ top",
        "func": "var id=flow.get(\"lastId\") || 0;\n++id;\nmsg.payload={\n    command:\"addRow\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"addRow @ top (#\"+id+\")\"\n            }\n        ],\n        true\n    ],\n    returnPromise: true\n}\nflow.set(\"lastId\",id);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 415,
        "y": 264,
        "wires": [
            [
                "3b24141414341858",
                "7a1e2c1fa67711ae"
            ]
        ],
        "info": "# addRow([row],onTop)\n\n`onTop=true`\n\nadds a new Row on top of the table"
    },
    {
        "id": "ae1d4b1ab7b49805",
        "type": "debug",
        "z": "ac3e1af7236de124",
        "name": "response from ui-table",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1115,
        "y": 400,
        "wires": []
    },
    {
        "id": "546faba0428e7932",
        "type": "inject",
        "z": "ac3e1af7236de124",
        "name": "Init 20 rows",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "20",
        "payloadType": "num",
        "x": 184,
        "y": 128,
        "wires": [
            [
                "16e6e054d3830b53"
            ]
        ]
    },
    {
        "id": "16e6e054d3830b53",
        "type": "function",
        "z": "ac3e1af7236de124",
        "name": "table with n rows as array",
        "func": "var numberOfRows = msg.payload;\nflow.set(\"lastId\",numberOfRows);\nmsg.payload=[];\nfor (let i=1; i<=numberOfRows; i++) {\n    msg.payload.push({\"id\":i,\"timestamp\":Date.now(),\"text\":\"this is line\"+i})\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 445,
        "y": 94,
        "wires": [
            [
                "7a1e2c1fa67711ae",
                "cbc07319d5ce280b",
                "516a5d12d4d76683"
            ]
        ]
    },
    {
        "id": "fa745d0bf13c8230",
        "type": "function",
        "z": "ac3e1af7236de124",
        "name": "updateOrAddData (add)",
        "func": "var id=flow.get(\"lastId\") || 0;\n++id;\nmsg.payload={\n    command:\"updateOrAddData\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"updateOrAddData (add) (#\"+id+\")\"\n            }\n        ]\n    ],\n    returnPromise: true\n}\nflow.set(\"lastId\",id);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 445,
        "y": 451,
        "wires": [
            [
                "33f854d6b18f6518",
                "7a1e2c1fa67711ae"
            ]
        ],
        "info": "# updateOrAddData([row])\n\nadds a the row with a new id (same as addRow)"
    },
    {
        "id": "36081682d0a23484",
        "type": "inject",
        "z": "ac3e1af7236de124",
        "name": "add",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 164,
        "y": 485,
        "wires": [
            [
                "fa745d0bf13c8230"
            ]
        ]
    },
    {
        "id": "33f854d6b18f6518",
        "type": "debug",
        "z": "ac3e1af7236de124",
        "name": "updateOrAddData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 425,
        "y": 570,
        "wires": []
    },
    {
        "id": "ef9e7623decf09bb",
        "type": "inject",
        "z": "ac3e1af7236de124",
        "name": "add @ end",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 174,
        "y": 383,
        "wires": [
            [
                "783cc8055f77045d"
            ]
        ]
    },
    {
        "id": "783cc8055f77045d",
        "type": "function",
        "z": "ac3e1af7236de124",
        "name": "addRow @ end",
        "func": "var id=flow.get(\"lastId\") || 0;\n++id;\nmsg.payload={\n    command:\"addRow\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"addRow @ end (#\"+id+\")\"\n            }\n        ],\n        false\n    ],\n    returnPromise: true\n}\nflow.set(\"lastId\",id);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 415,
        "y": 349,
        "wires": [
            [
                "3b24141414341858",
                "7a1e2c1fa67711ae"
            ]
        ],
        "info": "# addRow([row],onTop)\n\n`onTop=false`\n\nadds a new Row on top of the table"
    },
    {
        "id": "9b769b1e15affc89",
        "type": "function",
        "z": "ac3e1af7236de124",
        "name": "updateOrAddData (update)",
        "func": "var id=flow.get(\"lastId\") || 0;\nif (id<2) {\n    node.error(\"use only if minimum of 2 Lines existing!\")\n    return;\n}\n\nid=Math.floor(id/2); //\nmsg.payload={\n    command:\"updateOrAddData\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"updateOrAddData (update) (#\"+id+\")\"\n            }\n        ]\n    ],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 455,
        "y": 519,
        "wires": [
            [
                "33f854d6b18f6518",
                "7a1e2c1fa67711ae"
            ]
        ],
        "info": "# updateOrAddData([row])\n\nupdates a the row with an id in the middle from 1 to lastId, hope it exists!\nIf not a row will be added"
    },
    {
        "id": "0351faef82bde220",
        "type": "comment",
        "z": "ac3e1af7236de124",
        "name": "update ui-table by passing the complete tableData as array",
        "info": "",
        "x": 307,
        "y": 43,
        "wires": []
    },
    {
        "id": "4477b979f569fba6",
        "type": "comment",
        "z": "ac3e1af7236de124",
        "name": "update ui-table by using commands",
        "info": "",
        "x": 237,
        "y": 213,
        "wires": []
    },
    {
        "id": "64a31d6f82b28a2f",
        "type": "inject",
        "z": "ac3e1af7236de124",
        "name": "update",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 164,
        "y": 553,
        "wires": [
            [
                "9b769b1e15affc89"
            ]
        ]
    },
    {
        "id": "14fc70b3b7b08db0",
        "type": "function",
        "z": "ac3e1af7236de124",
        "name": "deleteRow",
        "func": "var id=flow.get(\"lastId\") || 0;\nif (id<2) {\n    node.error(\"use only if minimum of 2 Lines existing!\")\n    return;\n}\n\nid=Math.floor(id/2); //\nmsg.payload={\n    command:\"deleteRow\",\n    arguments: [id],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 405,
        "y": 672,
        "wires": [
            [
                "4def512e25447517",
                "7a1e2c1fa67711ae"
            ]
        ],
        "info": "# deleteRow(row / [rows])\n\n`row=singleId`\n\nor\n\n`row=[array of IDs]` // seems there is a bug/issue in tabulator\n\ndelete a single the row with an id in the middle from 1 to lastId, hope it exists.\n\nWill fail on the second hit if you inject this two times because the id wad deleteted on the first"
    },
    {
        "id": "f08b97f3e6ce4041",
        "type": "inject",
        "z": "ac3e1af7236de124",
        "name": "delete",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 164,
        "y": 706,
        "wires": [
            [
                "14fc70b3b7b08db0"
            ]
        ]
    },
    {
        "id": "4def512e25447517",
        "type": "debug",
        "z": "ac3e1af7236de124",
        "name": "deleteRow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 405,
        "y": 791,
        "wires": []
    },
    {
        "id": "9d4b9386c999fe24",
        "type": "comment",
        "z": "ac3e1af7236de124",
        "name": "deleteRow will punch holes in table!",
        "info": "",
        "x": 237,
        "y": 621,
        "wires": []
    },
    {
        "id": "cbc07319d5ce280b",
        "type": "debug",
        "z": "ac3e1af7236de124",
        "name": "addRow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 395,
        "y": 145,
        "wires": []
    },
    {
        "id": "516a5d12d4d76683",
        "type": "function",
        "z": "ac3e1af7236de124",
        "name": "table recorder",
        "func": "var status = {fill:\"red\",shape:\"ring\",text:\"an error occured\"};\nvar success = (msg.topic && msg.topic===\"success\") || false;\nvar tableData = flow.get(\"tableData\");\nif (tableData === undefined) {\n    tableData = [];\n    flow.set(\"tableData\",tableData);\n}\n\n// find the index for a row in tableData for a given index (id)\nfunction checkIndex(id) {\n    let matchRow=-1\n    tableData.forEach(function (row,index){\n        if (row.id === id){\n            matchRow=index;\n            return matchRow;\n        }\n    })\n    return matchRow;\n}\n\n// flat merge one row \nfunction mergeRow(dest,source) {\n    Object.keys(source).forEach(function(key) {\n        dest[key]=source[key];\n    })\n}\n\n//merge or add one or many rows into tableData \nfunction mergeData(newData,toTop) {\n    newData.forEach(function (item,index) {\n        node.warn([\"findIndex\",item]);\n        let row=checkIndex(item.id);\n        if (row<0) { // row do not existst in tableData\n            if (toTop) {\n                tableData.push(item);\n                status.text+=\"newRow @ top\";\n            } else {\n                tableData.unshift(item);\n                status.text+=\"newRow @ bottom\";\n            }\n            return;\n        } else { // row exists so update\n            mergeRow(tableData[row],item);\n            status.text+=\"row updated\";\n            return;\n        }\n        if (status.text!==\"\") node.status(status);\n    });\n}\n\nswitch (typeof msg.payload){\n    case \"string\":\n        node.warn([\"[table recorder] \",(typeof msg.payload),msg.payload]);\n        switch (msg.payload){\n            case \"change\":\n                status={fill:\"green\",shape:\"dot\",text:\"table restored \"+tableData.length+\" rows\"};\n                msg.payload=tableData;\n                break;\n        }\n        break;\n    case \"object\":\n        node.warn([\"[table recorder] \",(typeof msg.payload),msg.payload]);\n        if (Array.isArray(msg.payload)) { // replace all tableData\n            status={fill:\"green\",shape:\"dot\",text:\"table replaced \"+msg.payload.length+\" rows\"};\n            tableData=RED.util.cloneMessage(msg.payload); \n        } else {\n            switch (msg.payload.command) { // clearData does not return a promise!\n                case \"clearData\":\n                    status={fill:\"green\",shape:\"dot\",text:\"clearData: done\"};\n                    tableData=[];\n                    flow.set(\"lastId\",0);\n                    break;                \n            }\n        }\n        break;\n    default: // likely a msg fom a ui-table command or callback\n        if (msg.hasOwnProperty(\"topic\")&&\n            msg.hasOwnProperty(\"ui_control\") && \n            msg.ui_control.hasOwnProperty(\"callback\") &&\n            msg.hasOwnProperty(\"return\")) { // message originates from a ui-table callback\n            if (success) {\n                switch(msg.return.command) {\n                    case \"addRow\":\n                        status.text=\"addRow: \";\n                        mergeData(msg.return.arguments[0],msg.return.arguments[1]);\n                        status.shape=\"dot\";\n                        break;\n                    case \"updateOrAddData\":\n                        status.text=\"updateOrAddData: \";\n                        mergeData(msg.return.arguments[0]);\n                        break;\n                    case \"deleteRow\":\n                        let row=checkIndex(msg.return.arguments[0]);\n                        tableData.splice(row,1);\n                        status.shape=\"dot\";\n                        status.text=\"deleteRow: \"+row+\" deleted\";\n                        break;\n                    default:\n                        status={fill:\"yellow\",shape:\"dot\",text:msg.return.command + \" unknown!\"};\n                        break;         \n                }\n            } else {\n                status.text=msg.topic+\" \"+msg.error;\n            }\n        }\n        break;\n}\nif (success) status.fill=\"green\";\nflow.set(\"tableData\",tableData);\nnode.status(status);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1095,
        "y": 468,
        "wires": [
            [
                "7a1e2c1fa67711ae"
            ]
        ],
        "icon": "font-awesome/fa-database",
        "info": "# simple ui-table handler\n## abstract\nUsing ui-table with commands offer the hole flexibilty of tabulator. The table can be manipulated down to cell level.\nAs the ui-table node only passes the commands to tabulator and receives promises back the node does not hold the table data. If the data should be available after refresh, tab change, new connections the flow is responsible to cache the data and all the manipulations.\nThis node takes care of most simple data manipulation commands and holds a copy of the data in `flow.context.tabledata`\n\n## details\n\n### row index (id)\n\nTo identify a [row a index](http://tabulator.info/docs/4.5/data#overview) column has to be defined. This colum defaults to `id` but can be changed by specifing a **field** by using `msg.ui_control`. In this example the row index is a simple counter adding up by one if a new line is added.\n\n### addRow command\n\n[details @ tabulator addRow docs](http://tabulator.info/docs/4.5/update#alter-add)\n\nYou can add a row by sending the `addRow` command. You can decide if the row adds on the top or at the bottom of table.\n\n### addOrUpdate command\n\n[details @ tabulator addOrUpdate docs](http://tabulator.info/docs/4.5/update#alter-update)\n\nTo update data the best way is to use the `addOrUpdate` command. If the row indetified by the index is not exeisting a new row will be added automatically\n\n### deleteRow command\n\n[details @ tabulator deleteRow docs](http://tabulator.info/docs/4.5/update#row)\n\nDelete one or more rows (passing an array always results in \"row not found error\"! I think there is an issue in tabulator)\n\n### clearData\n\n[details @ tabulator clearData docs](http://tabulator.info/docs/4.5/update#alter-empty)\n\nunfortunately this command (currently) do not send a promise back! So we have to pass it directly to the table handler"
    },
    {
        "id": "a8e01383838b402c",
        "type": "ui_ui_control",
        "z": "ac3e1af7236de124",
        "name": "",
        "events": "all",
        "x": 820,
        "y": 468,
        "wires": [
            [
                "516a5d12d4d76683"
            ]
        ]
    },
    {
        "id": "db910b99a072b37b",
        "type": "inject",
        "z": "ac3e1af7236de124",
        "d": true,
        "name": "delete 1-5",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 174,
        "y": 740,
        "wires": [
            [
                "f9e47a9303a3e6c9"
            ]
        ]
    },
    {
        "id": "f9e47a9303a3e6c9",
        "type": "function",
        "z": "ac3e1af7236de124",
        "d": true,
        "name": "delete Rows [2,4,6,8,10]",
        "func": "var id=flow.get(\"lastId\") || 0;\nif (id<10) {\n    node.error(\"use only if minimum of 10 Lines existing!\")\n    return;\n}\n\nid=Math.floor(id/2); //\nmsg.payload={\n    command:\"deleteRow\",\n    arguments: [[2,4,6,8,10]],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 445,
        "y": 740,
        "wires": [
            [
                "7a1e2c1fa67711ae",
                "4def512e25447517"
            ]
        ],
        "info": "# deleteRow(row / [rows])\n\n`row=singleId`\n\nor\n\n`row=[array of IDs]` // seems there is a bug/issue in tabulator\n\ndelete a single the row with an id in the middle from 1 to lastId, hope it exists.\n\nWill fail on the second hit if you inject this two times because the id wad deleteted on the first"
    },
    {
        "id": "9d5cef3147755fbf",
        "type": "function",
        "z": "ac3e1af7236de124",
        "name": "clearData",
        "func": "\nmsg.payload={\n    command:\"clearData\",\n    arguments: [],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 395,
        "y": 910,
        "wires": [
            [
                "479ed267e7683dc5",
                "7a1e2c1fa67711ae",
                "516a5d12d4d76683"
            ]
        ],
        "info": "# clear data\n\nunfortunately this command (currently) do not send a promise back! So we have to pass it directly to the table handler"
    },
    {
        "id": "bf40f4581f6a67e8",
        "type": "inject",
        "z": "ac3e1af7236de124",
        "name": "clear",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 164,
        "y": 944,
        "wires": [
            [
                "9d5cef3147755fbf"
            ]
        ]
    },
    {
        "id": "495b546e878a2d17",
        "type": "comment",
        "z": "ac3e1af7236de124",
        "name": "Erase all data by using clearData command",
        "info": "",
        "x": 267,
        "y": 859,
        "wires": []
    },
    {
        "id": "479ed267e7683dc5",
        "type": "debug",
        "z": "ac3e1af7236de124",
        "name": "clearData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 395,
        "y": 961,
        "wires": []
    },
    {
        "id": "ea2c141f5ae69a3b",
        "type": "inject",
        "z": "ac3e1af7236de124",
        "name": "change",
        "props": [
            {
                "p": "payload",
                "v": "change",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "change",
        "payloadType": "str",
        "x": 810,
        "y": 536,
        "wires": [
            [
                "516a5d12d4d76683"
            ]
        ]
    },
    {
        "id": "a6d4d51cf3a2a6a1",
        "type": "ui_button",
        "z": "ac3e1af7236de124",
        "name": "",
        "group": "989c07ccaee4eebf",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Init 20 rows",
        "tooltip": "init table by passing the hole table array (default way)",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "20",
        "payloadType": "num",
        "topic": "",
        "x": 184,
        "y": 94,
        "wires": [
            [
                "16e6e054d3830b53"
            ]
        ]
    },
    {
        "id": "22b451765a5212f0",
        "type": "ui_button",
        "z": "ac3e1af7236de124",
        "name": "",
        "group": "989c07ccaee4eebf",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "add one row @ top",
        "tooltip": "add a new row to the top",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 204,
        "y": 264,
        "wires": [
            [
                "5e14b99dfb2ba5ab"
            ]
        ]
    },
    {
        "id": "e5da202646657958",
        "type": "ui_button",
        "z": "ac3e1af7236de124",
        "name": "",
        "group": "989c07ccaee4eebf",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "add one row @ end",
        "tooltip": "add a new row at the end ",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 204,
        "y": 349,
        "wires": [
            [
                "783cc8055f77045d"
            ]
        ]
    },
    {
        "id": "8f0a7d8e6a4f36a7",
        "type": "ui_button",
        "z": "ac3e1af7236de124",
        "name": "",
        "group": "989c07ccaee4eebf",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "addOrUpdate (add)",
        "tooltip": "add a new row by passing a new id",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 204,
        "y": 451,
        "wires": [
            [
                "fa745d0bf13c8230"
            ]
        ]
    },
    {
        "id": "632e0c2420b4f2c1",
        "type": "ui_button",
        "z": "ac3e1af7236de124",
        "name": "",
        "group": "989c07ccaee4eebf",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "addOrUpdate (update)",
        "tooltip": "update the row in the middle (or add if a row with that id not exists)",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 214,
        "y": 519,
        "wires": [
            [
                "9b769b1e15affc89"
            ]
        ]
    },
    {
        "id": "6c90afaccd781050",
        "type": "ui_button",
        "z": "ac3e1af7236de124",
        "name": "",
        "group": "989c07ccaee4eebf",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "delete (middle)",
        "tooltip": "delate the row with the id=maxId/2. Will result an error if not existing",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 194,
        "y": 672,
        "wires": [
            [
                "14fc70b3b7b08db0"
            ]
        ]
    },
    {
        "id": "646bc2c89b1f0eeb",
        "type": "ui_button",
        "z": "ac3e1af7236de124",
        "name": "",
        "group": "989c07ccaee4eebf",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "clear",
        "tooltip": "clear all table data",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 164,
        "y": 910,
        "wires": [
            [
                "9d5cef3147755fbf"
            ]
        ]
    },
    {
        "id": "f428a591b94212e4",
        "type": "ui_text",
        "z": "ac3e1af7236de124",
        "group": "989c07ccaee4eebf",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "status",
        "format": "{{status.text}}",
        "layout": "col-center",
        "x": 980,
        "y": 706,
        "wires": []
    },
    {
        "id": "21102965e996aaea",
        "type": "status",
        "z": "ac3e1af7236de124",
        "name": "",
        "scope": [
            "516a5d12d4d76683"
        ],
        "x": 819,
        "y": 706,
        "wires": [
            [
                "f428a591b94212e4"
            ]
        ]
    },
    {
        "id": "3d8cac211a0e6dd3",
        "type": "ui_button",
        "z": "ac3e1af7236de124",
        "name": "",
        "group": "989c07ccaee4eebf",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "refresh (change)",
        "tooltip": "Same as ui-control sending a change message",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "change",
        "payloadType": "str",
        "topic": "",
        "x": 840,
        "y": 502,
        "wires": [
            [
                "516a5d12d4d76683"
            ]
        ]
    },
    {
        "id": "5e869c080b9d41bd",
        "type": "inject",
        "z": "ac3e1af7236de124",
        "name": "format table",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 184,
        "y": 1097,
        "wires": [
            [
                "b90f5ec15d8711da"
            ]
        ]
    },
    {
        "id": "f2fecc9521d6c172",
        "type": "comment",
        "z": "ac3e1af7236de124",
        "name": "Format Table using ui_control",
        "info": "",
        "x": 217,
        "y": 1012,
        "wires": []
    },
    {
        "id": "50580ebae7efbd6b",
        "type": "debug",
        "z": "ac3e1af7236de124",
        "name": "clearData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 395,
        "y": 1114,
        "wires": []
    },
    {
        "id": "26de0654e5535166",
        "type": "ui_button",
        "z": "ac3e1af7236de124",
        "name": "",
        "group": "989c07ccaee4eebf",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "format table",
        "tooltip": "Formats the table using msg.ui_control",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 184,
        "y": 1063,
        "wires": [
            [
                "b90f5ec15d8711da"
            ]
        ]
    },
    {
        "id": "b90f5ec15d8711da",
        "type": "change",
        "z": "ac3e1af7236de124",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"customHeight\":18,\"tabulator\":{\"layout\":\"fitColumns\",\"movableColumns\":false,\"index\":\"id\",\"columns\":[{\"title\":\"ID\",\"field\":\"id\",\"formatter\":\"text\",\"headerTooltip\":\"id number act as row index\"},{\"formatterParams\":{\"outputFormat\":\"HH:mm:ss.SSS\",\"inputFormat\":\"x\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Timestamp\",\"field\":\"timestamp\",\"formatter\":\"datetime\",\"headerTooltip\":\"timestamp of last change\"},{\"title\":\"Text\",\"field\":\"text\",\"headerTooltip\":\"last cause of reboot (provided by http json request)\"}]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 425,
        "y": 1063,
        "wires": [
            [
                "50580ebae7efbd6b",
                "7a1e2c1fa67711ae",
                "219bb679b6be075a"
            ]
        ]
    },
    {
        "id": "219bb679b6be075a",
        "type": "change",
        "z": "ac3e1af7236de124",
        "name": "change",
        "rules": [
            {
                "t": "delete",
                "p": "ui_control",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 633,
        "y": 1063,
        "wires": [
            [
                "516a5d12d4d76683"
            ]
        ]
    }
]